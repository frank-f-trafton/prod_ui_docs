{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ProdUI ProdUI is a user interface library for the L\u00d6VE Framework . It is currently unfinished , but the demo program should run on desktop computers with L\u00d6VE 11.5. This documentation should be treated as an early draft. Installation License The ProdUI library and its documentation are provided under the terms of the MIT/X11 license. The included fonts are licensed with the SIL Open Font License (OFL). Refer to the LICENSE file in the main repository for more details. Note that forks of ProdUI may contain new or modified content with different licensing.","title":"ProdUI"},{"location":"#produi","text":"ProdUI is a user interface library for the L\u00d6VE Framework . It is currently unfinished , but the demo program should run on desktop computers with L\u00d6VE 11.5. This documentation should be treated as an early draft. Installation","title":"ProdUI"},{"location":"#license","text":"The ProdUI library and its documentation are provided under the terms of the MIT/X11 license. The included fonts are licensed with the SIL Open Font License (OFL). Refer to the LICENSE file in the main repository for more details. Note that forks of ProdUI may contain new or modified content with different licensing.","title":"License"},{"location":"acknowledgements/","text":"Acknowledgements Libraries inspect.lua is used for debugging. nativefs is used in the theme building script. strict.lua is used for testing. prod_ui/lib/pack_bin.lua is adapted from packer.js . The packing algorithm is also used in AtlasB, a dependency of the theme builder. The theme builder's table serialization library uses parts from Serpent . The text editing component takes some code (UTF-8 iteration and string sanitizing, if I recall correctly), feature ideas and general inspiration from InputField . Concepts Widget event bubbling and trickling was taken from LUIGI . I refined my implementation after reading this L\u00d6VE forum thread . Some tree traversal code, including the function to get the \"last\" descendant in a tree, is taken from LUIGI . The stepper widget concept is taken from LUIGI . The contextDraw canvas stack behavior is based on the opacity stack in lwtk . Parts of the layout system are inspired by the pack command in Tk . General inspiration taken from GOOi , urutora , Love Frames , SLAB , and the aforementioned LUIGI . Fonts In prod_ui/themes/vacuum/fonts/noto_sans : Noto Sans (OFL) Noto Sans Symbols (OFL) Noto Sans Symbols 2 (OFL) Thanks Pedro Gimeno, for this tip on premultiplied alpha . Nik Barker: How Clay's UI Layout Algorithm Works (video)","title":"Acknowledgements"},{"location":"acknowledgements/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"acknowledgements/#libraries","text":"inspect.lua is used for debugging. nativefs is used in the theme building script. strict.lua is used for testing. prod_ui/lib/pack_bin.lua is adapted from packer.js . The packing algorithm is also used in AtlasB, a dependency of the theme builder. The theme builder's table serialization library uses parts from Serpent . The text editing component takes some code (UTF-8 iteration and string sanitizing, if I recall correctly), feature ideas and general inspiration from InputField .","title":"Libraries"},{"location":"acknowledgements/#concepts","text":"Widget event bubbling and trickling was taken from LUIGI . I refined my implementation after reading this L\u00d6VE forum thread . Some tree traversal code, including the function to get the \"last\" descendant in a tree, is taken from LUIGI . The stepper widget concept is taken from LUIGI . The contextDraw canvas stack behavior is based on the opacity stack in lwtk . Parts of the layout system are inspired by the pack command in Tk . General inspiration taken from GOOi , urutora , Love Frames , SLAB , and the aforementioned LUIGI .","title":"Concepts"},{"location":"acknowledgements/#fonts","text":"In prod_ui/themes/vacuum/fonts/noto_sans : Noto Sans (OFL) Noto Sans Symbols (OFL) Noto Sans Symbols 2 (OFL)","title":"Fonts"},{"location":"acknowledgements/#thanks","text":"Pedro Gimeno, for this tip on premultiplied alpha . Nik Barker: How Clay's UI Layout Algorithm Works (video)","title":"Thanks"},{"location":"miscellaneous/","text":"Miscellaneous Terminology Booleans ProdUI's source code and documentation use the terms true and false in the sense of \"evaluates to true\" and \"evaluates to false,\" unless boolean is also explicitly stated. \"Return true to halt propagation\" means \"Return any value other than nil or false\u2026\" \"Return boolean true to halt propagation\" refers to the actual boolean type.","title":"Miscellaneous"},{"location":"miscellaneous/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"miscellaneous/#terminology","text":"","title":"Terminology"},{"location":"miscellaneous/#booleans","text":"ProdUI's source code and documentation use the terms true and false in the sense of \"evaluates to true\" and \"evaluates to false,\" unless boolean is also explicitly stated. \"Return true to halt propagation\" means \"Return any value other than nil or false\u2026\" \"Return boolean true to halt propagation\" refers to the actual boolean type.","title":"Booleans"},{"location":"reference/context/","text":"Context A running instance of ProdUI. Nearly all UI state and data is stored in this table. Scope While not a global variable, the context is passed around to so many files that it is often treated like one. It is also, technically, not a singleton, but most applications will only have the need for one context. Paths Some functions can interpolate symbols into paths. The symbol %produi% is built in, and by default, it will always point to the ProdUI directory. The library user can add more path symbols by editing the table context.path_symbols . Warning The editing of paths should happen before any resources are loaded, probably just after making the context. Changing paths after anything has been instantiated will cause problems.","title":"Context"},{"location":"reference/context/#context","text":"A running instance of ProdUI. Nearly all UI state and data is stored in this table.","title":"Context"},{"location":"reference/context/#scope","text":"While not a global variable, the context is passed around to so many files that it is often treated like one. It is also, technically, not a singleton, but most applications will only have the need for one context.","title":"Scope"},{"location":"reference/context/#paths","text":"Some functions can interpolate symbols into paths. The symbol %produi% is built in, and by default, it will always point to the ProdUI directory. The library user can add more path symbols by editing the table context.path_symbols .","title":"Paths"},{"location":"reference/context/#warning","text":"The editing of paths should happen before any resources are loaded, probably just after making the context. Changing paths after anything has been instantiated will cause problems.","title":"Warning"},{"location":"reference/context_callbacks/","text":"Context Callbacks context:love_keypressed L\u00d6VE Callback: love.keypressed Signature: context:love_keypressed(key, scancode, isrepeat) context:love_keyreleased L\u00d6VE Callback: love.keyreleased Signature: context:love_keyreleased(key, scancode) context:love_update L\u00d6VE Callback: love.update Signature: context:love_update(dt) context:love_textinput L\u00d6VE Callback: love.textinput Signature: context:love_textinput(text) context:love_focus L\u00d6VE Callback: love.focus Signature: context:love_focus(focus) context:love_visible L\u00d6VE Callback: love.visible Signature: context:love_visible(visible) context:love_mousefocus L\u00d6VE Callback: love.mousefocus Signature: context:love_mousefocus(focus) context:love_wheelmoved L\u00d6VE Callback: love.wheelmoved Signature: context:love_wheelmoved(x, y) context:love_mousereleased L\u00d6VE Callback: love.mousereleased Signature: context:love_mousereleased(x, y, button, istouch, presses) context:love_mousemoved L\u00d6VE Callback: love.mousemoved Signature: context:love_mousemoved(x, y, dx, dy, istouch) context:love_mousepressed L\u00d6VE Callback: love.mousepressed Signature: context:love_mousepressed(x, y, button, istouch, presses) context:love_resize L\u00d6VE Callback: love.resize Signature: context:love_resize(w, h) context:love_joystickadded L\u00d6VE Callback: love.joystickadded Signature: context:love_joystickadded(joystick) context:love_joystickremoved L\u00d6VE Callback: love.joystickremoved Signature: context:love_joystickremoved(joystick) context:love_joystickpressed L\u00d6VE Callback: love.joystickpressed Signature: context:love_joystickpressed(joystick, button) context:love_joystickreleased L\u00d6VE Callback: love.joystickreleased Signature: context:love_joystickreleased(joystick, button) context:love_joystickaxis L\u00d6VE Callback: love.joystickaxis Signature: context:love_joystickaxis(joystick, axis, value) context:love_joystickhat L\u00d6VE Callback: love.joystickhat Signature: context:love_joystickhat(joystick, hat, direction) context:love_gamepadpressed L\u00d6VE Callback: love.gamepadpressed Signature: context:love_gamepadpressed(joystick, button) context:love_gamepadreleased L\u00d6VE Callback: love.gamepadreleased Signature: context:love_gamepadreleased(joystick, button) context:love_gamepadaxis L\u00d6VE Callback: love.gamepadaxis Signature: context:love_gamepadaxis(joystick, axis, value) context:love_filedropped L\u00d6VE Callback: love.filedropped Signature: context:love_filedropped(file) context:love_directorydropped L\u00d6VE Callback: love.directorydropped Signature: context:love_directorydropped(path)","title":"Context Callbacks"},{"location":"reference/context_callbacks/#context-callbacks","text":"","title":"Context Callbacks"},{"location":"reference/context_callbacks/#contextlove_keypressed","text":"L\u00d6VE Callback: love.keypressed Signature: context:love_keypressed(key, scancode, isrepeat)","title":"context:love_keypressed"},{"location":"reference/context_callbacks/#contextlove_keyreleased","text":"L\u00d6VE Callback: love.keyreleased Signature: context:love_keyreleased(key, scancode)","title":"context:love_keyreleased"},{"location":"reference/context_callbacks/#contextlove_update","text":"L\u00d6VE Callback: love.update Signature: context:love_update(dt)","title":"context:love_update"},{"location":"reference/context_callbacks/#contextlove_textinput","text":"L\u00d6VE Callback: love.textinput Signature: context:love_textinput(text)","title":"context:love_textinput"},{"location":"reference/context_callbacks/#contextlove_focus","text":"L\u00d6VE Callback: love.focus Signature: context:love_focus(focus)","title":"context:love_focus"},{"location":"reference/context_callbacks/#contextlove_visible","text":"L\u00d6VE Callback: love.visible Signature: context:love_visible(visible)","title":"context:love_visible"},{"location":"reference/context_callbacks/#contextlove_mousefocus","text":"L\u00d6VE Callback: love.mousefocus Signature: context:love_mousefocus(focus)","title":"context:love_mousefocus"},{"location":"reference/context_callbacks/#contextlove_wheelmoved","text":"L\u00d6VE Callback: love.wheelmoved Signature: context:love_wheelmoved(x, y)","title":"context:love_wheelmoved"},{"location":"reference/context_callbacks/#contextlove_mousereleased","text":"L\u00d6VE Callback: love.mousereleased Signature: context:love_mousereleased(x, y, button, istouch, presses)","title":"context:love_mousereleased"},{"location":"reference/context_callbacks/#contextlove_mousemoved","text":"L\u00d6VE Callback: love.mousemoved Signature: context:love_mousemoved(x, y, dx, dy, istouch)","title":"context:love_mousemoved"},{"location":"reference/context_callbacks/#contextlove_mousepressed","text":"L\u00d6VE Callback: love.mousepressed Signature: context:love_mousepressed(x, y, button, istouch, presses)","title":"context:love_mousepressed"},{"location":"reference/context_callbacks/#contextlove_resize","text":"L\u00d6VE Callback: love.resize Signature: context:love_resize(w, h)","title":"context:love_resize"},{"location":"reference/context_callbacks/#contextlove_joystickadded","text":"L\u00d6VE Callback: love.joystickadded Signature: context:love_joystickadded(joystick)","title":"context:love_joystickadded"},{"location":"reference/context_callbacks/#contextlove_joystickremoved","text":"L\u00d6VE Callback: love.joystickremoved Signature: context:love_joystickremoved(joystick)","title":"context:love_joystickremoved"},{"location":"reference/context_callbacks/#contextlove_joystickpressed","text":"L\u00d6VE Callback: love.joystickpressed Signature: context:love_joystickpressed(joystick, button)","title":"context:love_joystickpressed"},{"location":"reference/context_callbacks/#contextlove_joystickreleased","text":"L\u00d6VE Callback: love.joystickreleased Signature: context:love_joystickreleased(joystick, button)","title":"context:love_joystickreleased"},{"location":"reference/context_callbacks/#contextlove_joystickaxis","text":"L\u00d6VE Callback: love.joystickaxis Signature: context:love_joystickaxis(joystick, axis, value)","title":"context:love_joystickaxis"},{"location":"reference/context_callbacks/#contextlove_joystickhat","text":"L\u00d6VE Callback: love.joystickhat Signature: context:love_joystickhat(joystick, hat, direction)","title":"context:love_joystickhat"},{"location":"reference/context_callbacks/#contextlove_gamepadpressed","text":"L\u00d6VE Callback: love.gamepadpressed Signature: context:love_gamepadpressed(joystick, button)","title":"context:love_gamepadpressed"},{"location":"reference/context_callbacks/#contextlove_gamepadreleased","text":"L\u00d6VE Callback: love.gamepadreleased Signature: context:love_gamepadreleased(joystick, button)","title":"context:love_gamepadreleased"},{"location":"reference/context_callbacks/#contextlove_gamepadaxis","text":"L\u00d6VE Callback: love.gamepadaxis Signature: context:love_gamepadaxis(joystick, axis, value)","title":"context:love_gamepadaxis"},{"location":"reference/context_callbacks/#contextlove_filedropped","text":"L\u00d6VE Callback: love.filedropped Signature: context:love_filedropped(file)","title":"context:love_filedropped"},{"location":"reference/context_callbacks/#contextlove_directorydropped","text":"L\u00d6VE Callback: love.directorydropped Signature: context:love_directorydropped(path)","title":"context:love_directorydropped"},{"location":"reference/installation/","text":"Installation TODO","title":"Installation"},{"location":"reference/installation/#installation","text":"TODO","title":"Installation"},{"location":"reference/labels/","text":"Labels The Label widget component provides code for configuring and drawing a text label. lgc_label The main label implementation. Location prod_ui/shared/lgc_label.lua Label modes single : A single line of text. single-ul : A single line of text with an optional underline. The text to be underlined is marked by two underscores, like _this_ . multi : Multi-line text. Required Widget Fields Labels are hard-coded for placement within Viewport #1: vp_x , vp_y , vp_w , vp_h Required Skin Fields skin.tq_px : A textured quad of a single white pixel. Used for drawing the underline. skin.label_align_h : Horizontal text alignment. skin.label_align_v : Vertical text alignment. skin.label_style : The label style table, usually taken from the theme table. .font : The font to use when measuring and rendering text. .ul_color : Underline color table, or false to use the current text color. .ul_h : Underline height (thickness). Methods lgcLabel.setup Sets up the Label component in a widget or changes the existing label state. lgcLabel.setup(self, mode) Arguments self : The widget. mode : The label mode to use. Notes This function always overwrites the label text with an empty string. If you call it on a widget that already had Label state, then you will have to update the label text. lgcLabel.remove Removes any Label component from a widget. lgcLabel.remove(self) Arguments self : The widget. lgcLabel.widSetLabel Sets the Label text and mode. lgcLabel.widSetLabel(self, text, [mode]) Arguments self : The widget. text : The text to use. [mode] : (self.mode) Optionally change the Label mode. lgcLabel.reshapeLabel Reshapes the Label, applying alignment offsets and wrapping where applicable. Intended for uiCall_reshape callbacks. lgcLabel.reshapeLabel(self) Arguments self : The widget. lgcLabel.render Draws a widget's label text. Intended for render callbacks. lgcLabel.render(self, skin, font, c_text, c_ul, label_ox, label_oy, ox, oy) Arguments self : The widget. c_text : The text color (table). c_ul : The underline color (table, or false/nil to use the text color). label_ox : Text X offset. label_oy : Text Y offset. ox : Scissor X offset. oy : Scissor Y offset. lgc_label_bare A label implementation for barebones widgets. Location prod_ui/shared/lgc_label.lua Barebones Label Modes Barebones labels are single-line only and do not have explicit mode state. Required Widget Fields None. Required Skin Fields N/A Methods lgcLabelBare.setup Sets up a barebones label component in a widget. lgcLabelBare.setup(self) Arguments self : The widget. lgcLabelBare.remove Removes a barebones label component from a widget. lgcLabelBare.remove(self) Arguments self : The widget. lgcLabelBare.widSetLabel Sets the text of a barebones label. lgcLabelBare.widSetLabel(self, text) Arguments self : The widget. text : The text to assign. lgcLabelBare.render Draws the barebones label text. Intended for render callbacks. lgcLabelBare.render(self, font, r, g, b, a) Arguments self : The widget. font : The font to use. r , g , b , a : The text color.","title":"Labels"},{"location":"reference/labels/#labels","text":"The Label widget component provides code for configuring and drawing a text label.","title":"Labels"},{"location":"reference/labels/#lgc_label","text":"The main label implementation.","title":"lgc_label"},{"location":"reference/labels/#location","text":"prod_ui/shared/lgc_label.lua","title":"Location"},{"location":"reference/labels/#label-modes","text":"single : A single line of text. single-ul : A single line of text with an optional underline. The text to be underlined is marked by two underscores, like _this_ . multi : Multi-line text.","title":"Label modes"},{"location":"reference/labels/#required-widget-fields","text":"Labels are hard-coded for placement within Viewport #1: vp_x , vp_y , vp_w , vp_h","title":"Required Widget Fields"},{"location":"reference/labels/#required-skin-fields","text":"skin.tq_px : A textured quad of a single white pixel. Used for drawing the underline. skin.label_align_h : Horizontal text alignment. skin.label_align_v : Vertical text alignment. skin.label_style : The label style table, usually taken from the theme table. .font : The font to use when measuring and rendering text. .ul_color : Underline color table, or false to use the current text color. .ul_h : Underline height (thickness).","title":"Required Skin Fields"},{"location":"reference/labels/#methods","text":"","title":"Methods"},{"location":"reference/labels/#lgclabelsetup","text":"Sets up the Label component in a widget or changes the existing label state. lgcLabel.setup(self, mode)","title":"lgcLabel.setup"},{"location":"reference/labels/#arguments","text":"self : The widget. mode : The label mode to use.","title":"Arguments"},{"location":"reference/labels/#notes","text":"This function always overwrites the label text with an empty string. If you call it on a widget that already had Label state, then you will have to update the label text.","title":"Notes"},{"location":"reference/labels/#lgclabelremove","text":"Removes any Label component from a widget. lgcLabel.remove(self)","title":"lgcLabel.remove"},{"location":"reference/labels/#arguments_1","text":"self : The widget.","title":"Arguments"},{"location":"reference/labels/#lgclabelwidsetlabel","text":"Sets the Label text and mode. lgcLabel.widSetLabel(self, text, [mode])","title":"lgcLabel.widSetLabel"},{"location":"reference/labels/#arguments_2","text":"self : The widget. text : The text to use. [mode] : (self.mode) Optionally change the Label mode.","title":"Arguments"},{"location":"reference/labels/#lgclabelreshapelabel","text":"Reshapes the Label, applying alignment offsets and wrapping where applicable. Intended for uiCall_reshape callbacks. lgcLabel.reshapeLabel(self)","title":"lgcLabel.reshapeLabel"},{"location":"reference/labels/#arguments_3","text":"self : The widget.","title":"Arguments"},{"location":"reference/labels/#lgclabelrender","text":"Draws a widget's label text. Intended for render callbacks. lgcLabel.render(self, skin, font, c_text, c_ul, label_ox, label_oy, ox, oy)","title":"lgcLabel.render"},{"location":"reference/labels/#arguments_4","text":"self : The widget. c_text : The text color (table). c_ul : The underline color (table, or false/nil to use the text color). label_ox : Text X offset. label_oy : Text Y offset. ox : Scissor X offset. oy : Scissor Y offset.","title":"Arguments"},{"location":"reference/labels/#lgc_label_bare","text":"A label implementation for barebones widgets.","title":"lgc_label_bare"},{"location":"reference/labels/#location_1","text":"prod_ui/shared/lgc_label.lua","title":"Location"},{"location":"reference/labels/#barebones-label-modes","text":"Barebones labels are single-line only and do not have explicit mode state.","title":"Barebones Label Modes"},{"location":"reference/labels/#required-widget-fields_1","text":"None.","title":"Required Widget Fields"},{"location":"reference/labels/#required-skin-fields_1","text":"N/A","title":"Required Skin Fields"},{"location":"reference/labels/#methods_1","text":"","title":"Methods"},{"location":"reference/labels/#lgclabelbaresetup","text":"Sets up a barebones label component in a widget. lgcLabelBare.setup(self)","title":"lgcLabelBare.setup"},{"location":"reference/labels/#arguments_5","text":"self : The widget.","title":"Arguments"},{"location":"reference/labels/#lgclabelbareremove","text":"Removes a barebones label component from a widget. lgcLabelBare.remove(self)","title":"lgcLabelBare.remove"},{"location":"reference/labels/#arguments_6","text":"self : The widget.","title":"Arguments"},{"location":"reference/labels/#lgclabelbarewidsetlabel","text":"Sets the text of a barebones label. lgcLabelBare.widSetLabel(self, text)","title":"lgcLabelBare.widSetLabel"},{"location":"reference/labels/#arguments_7","text":"self : The widget. text : The text to assign.","title":"Arguments"},{"location":"reference/labels/#lgclabelbarerender","text":"Draws the barebones label text. Intended for render callbacks. lgcLabelBare.render(self, font, r, g, b, a)","title":"lgcLabelBare.render"},{"location":"reference/labels/#arguments_8","text":"self : The widget. font : The font to use. r , g , b , a : The text color.","title":"Arguments"},{"location":"reference/layout/","text":"Layout ProdUI uses a tree structure to implement layouts. This layout tree is separate from the widget hierarchy tree. A widget's direct children may be added and removed from nodes in its layout tree without altering the overall tree structure. Only a few widgets have built-in support for layout trees. Node Modes There are four explicit settings for layout nodes: slice : Reduces the parent node along one side (left, top, bottom, right), and assigns the taken part to a child. grid : Fits the child as a grid tile within the parent node. static : Assigns predetermined coordinates and dimensions to the child, still relative to the parent. null : No effect. The root node does not support these settings. Its size is the remainder of whatever has not been taken by slice nodes. Diagrams Here is an example layout with slice nodes. \u250c\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u2508\u2508\u2508\u2508\u2510 \u2502 \u2502 B \u2502 \u2502 A \u251c\u2508\u2508\u2508\u2508\u2508\u2524 \u2502 \u2502 C \u2502 \u2514\u2508\u2508\u2508\u2508\u2508\u2534\u2508\u2508\u2508\u2508\u2508\u2518 The tree looks like this: A, root \u2514 B, slice right 50% \u2514 C, slice bottom 50% Here is a more convoluted example. \u250c\u2508\u252c\u2508\u252c\u2508\u252c\u2508\u252c\u2508\u2510 \u2502A\u2502C\u2502 \u2502 \u2502 \u2502 \u251c\u2508\u253c\u2508\u2524E\u2502F\u2502G\u2502 \u2502B\u2502D\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518 G | +-+-+-+ | | | | A C E F | | B D G, root \u2514 A, slice left 20% \u2514 B, slice bottom 50% \u2514 C, slice left 20% \u2514 D, slice bottom 50% \u2514 E, slice left 20% \u2514 F, slice left 20%","title":"Layout"},{"location":"reference/layout/#layout","text":"ProdUI uses a tree structure to implement layouts. This layout tree is separate from the widget hierarchy tree. A widget's direct children may be added and removed from nodes in its layout tree without altering the overall tree structure. Only a few widgets have built-in support for layout trees.","title":"Layout"},{"location":"reference/layout/#node-modes","text":"There are four explicit settings for layout nodes: slice : Reduces the parent node along one side (left, top, bottom, right), and assigns the taken part to a child. grid : Fits the child as a grid tile within the parent node. static : Assigns predetermined coordinates and dimensions to the child, still relative to the parent. null : No effect. The root node does not support these settings. Its size is the remainder of whatever has not been taken by slice nodes.","title":"Node Modes"},{"location":"reference/layout/#diagrams","text":"Here is an example layout with slice nodes. \u250c\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u2508\u2508\u2508\u2508\u2510 \u2502 \u2502 B \u2502 \u2502 A \u251c\u2508\u2508\u2508\u2508\u2508\u2524 \u2502 \u2502 C \u2502 \u2514\u2508\u2508\u2508\u2508\u2508\u2534\u2508\u2508\u2508\u2508\u2508\u2518 The tree looks like this: A, root \u2514 B, slice right 50% \u2514 C, slice bottom 50% Here is a more convoluted example. \u250c\u2508\u252c\u2508\u252c\u2508\u252c\u2508\u252c\u2508\u2510 \u2502A\u2502C\u2502 \u2502 \u2502 \u2502 \u251c\u2508\u253c\u2508\u2524E\u2502F\u2502G\u2502 \u2502B\u2502D\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518 G | +-+-+-+ | | | | A C E F | | B D G, root \u2514 A, slice left 20% \u2514 B, slice bottom 50% \u2514 C, slice left 20% \u2514 D, slice bottom 50% \u2514 E, slice left 20% \u2514 F, slice left 20%","title":"Diagrams"},{"location":"reference/menus/","text":"Menus Menu items are contained in the array self.items . Each item is a table, and the menu checks the following variables when making selections: item.selectable (boolean): This item can be selected by a menu cursor. When moving the cursor, non-selectable items are skipped. If no items are selectable, then the selection index is 0 (no selection). self.default_deselect (boolean): When true, the default menu item is nothing (index 0). item.is_default_selection (boolean): The item to select by default, if self.default_deselect is false. When multiple items have this set, the first such item that is selectable is chosen. If no item has this set, then the default is the first selectable item (or if there are no selectable items, then the cursor is set to no selection.) The main selection is tracked in self.index . Additional indices can be used by passing in different id keys to menu methods. self.index gets \"camera priority\" by higher-level logic. Arbitrary multiple selection is implemented by setting the field marked on a per-item basis. Not all menu widgets support multiple selection. When creating a menu structure, the library user can provide an existing table of items (for example, a widget's array of child widgets).","title":"Menus"},{"location":"reference/menus/#menus","text":"Menu items are contained in the array self.items . Each item is a table, and the menu checks the following variables when making selections: item.selectable (boolean): This item can be selected by a menu cursor. When moving the cursor, non-selectable items are skipped. If no items are selectable, then the selection index is 0 (no selection). self.default_deselect (boolean): When true, the default menu item is nothing (index 0). item.is_default_selection (boolean): The item to select by default, if self.default_deselect is false. When multiple items have this set, the first such item that is selectable is chosen. If no item has this set, then the default is the first selectable item (or if there are no selectable items, then the cursor is set to no selection.) The main selection is tracked in self.index . Additional indices can be used by passing in different id keys to menu methods. self.index gets \"camera priority\" by higher-level logic. Arbitrary multiple selection is implemented by setting the field marked on a per-item basis. Not all menu widgets support multiple selection. When creating a menu structure, the library user can provide an existing table of items (for example, a widget's array of child widgets).","title":"Menus"},{"location":"reference/mouse_cursor/","text":"Mouse Cursor State The mouse cursor is set by assigning cursor IDs to these fields: context.cursor_high : (Priority: 1) Overrides all other cursor fields. widget.cursor_press : (Priority: 2) Used when the pointer is pressing on a widget. (Travels up the hierarchy until a cursor ID is found.) widget.cursor_hover : (Priority: 3) Used when the pointer hovers over a widget. (Travels up the hierarchy until a cursor ID is found.) context.cursor_low : (Priority: 4) Used when no other cursor fields are active. The populated field with the lowest priority is selected. Cursor IDs The default cursor IDs are pulled from L\u00d6VE's built-in hardware cursors . ProdUI includes an invisible cursor with the ID nothing . arrow crosshair ibeam hand no nothing sizeall sizenesw sizens sizenwse sizewe wait waitarrow","title":"Mouse Cursor State"},{"location":"reference/mouse_cursor/#mouse-cursor-state","text":"The mouse cursor is set by assigning cursor IDs to these fields: context.cursor_high : (Priority: 1) Overrides all other cursor fields. widget.cursor_press : (Priority: 2) Used when the pointer is pressing on a widget. (Travels up the hierarchy until a cursor ID is found.) widget.cursor_hover : (Priority: 3) Used when the pointer hovers over a widget. (Travels up the hierarchy until a cursor ID is found.) context.cursor_low : (Priority: 4) Used when no other cursor fields are active. The populated field with the lowest priority is selected.","title":"Mouse Cursor State"},{"location":"reference/mouse_cursor/#cursor-ids","text":"The default cursor IDs are pulled from L\u00d6VE's built-in hardware cursors . ProdUI includes an invisible cursor with the ID nothing . arrow crosshair ibeam hand no nothing sizeall sizenesw sizens sizenwse sizewe wait waitarrow","title":"Cursor IDs"},{"location":"reference/project_setup/","text":"Project Setup Disable L\u00d6VE Text input. love.keyboard.setTextInput(false) Text input should not be changed by user code while the ProdUI context is active. Widgets will turn text input on and off as they take and release keyboard focus. If left on all the time, there is a chance that keystrokes will generate conflicting keypressed and textinput events.","title":"Project Setup"},{"location":"reference/project_setup/#project-setup","text":"Disable L\u00d6VE Text input. love.keyboard.setTextInput(false) Text input should not be changed by user code while the ProdUI context is active. Widgets will turn text input on and off as they take and release keyboard focus. If left on all the time, there is a chance that keystrokes will generate conflicting keypressed and textinput events.","title":"Project Setup"},{"location":"reference/reshaping/","text":"Reshaping Widget Reshape Events uiCall_reshapePre : Emitted first. The widget can halt further reshaping by returning true. uiCall_reshapePost : Emitted last, after layout updates and the reshaping of descendants.","title":"Reshaping"},{"location":"reference/reshaping/#reshaping","text":"","title":"Reshaping"},{"location":"reference/reshaping/#widget-reshape-events","text":"uiCall_reshapePre : Emitted first. The widget can halt further reshaping by returning true. uiCall_reshapePost : Emitted last, after layout updates and the reshaping of descendants.","title":"Widget Reshape Events"},{"location":"reference/scrolling/","text":"Scrolling Widget Scroll Registers scr_x , scr_y : Public scroll values. Rounded to integer. scr_fx , scr_fy : Private scroll value. Double. scr_tx , scr_ty : Target scroll values. Double. The public values are provided just so that other code doesn't constantly have to round coordinates when drawing or performing intersection tests. In widgets that use the viewport system, The scroll values are offset by Viewport #1's position. The plug-in scroll methods take this into account, but if you read the registers directly, you may find that the scroll values for the top-left position go into the negative. To get the expected value, add viewport 1's position.","title":"Scrolling"},{"location":"reference/scrolling/#scrolling","text":"","title":"Scrolling"},{"location":"reference/scrolling/#widget-scroll-registers","text":"scr_x , scr_y : Public scroll values. Rounded to integer. scr_fx , scr_fy : Private scroll value. Double. scr_tx , scr_ty : Target scroll values. Double. The public values are provided just so that other code doesn't constantly have to round coordinates when drawing or performing intersection tests. In widgets that use the viewport system, The scroll values are offset by Viewport #1's position. The plug-in scroll methods take this into account, but if you read the registers directly, you may find that the scroll values for the top-left position go into the negative. To get the expected value, add viewport 1's position.","title":"Widget Scroll Registers"},{"location":"reference/themes/","text":"Themes Themes define the UI's general look. A ProdUI theme is a plain hierchical table of settings and references to other data. When applied, its contents are vetted and then transferred to the UI Context. ProdUI ships with a default theme at prod_ui/theme , which can be loaded as a table with uiRes.loadDirectoryAsTable() . The result can be patched by mounting ZIP files on top of the theme's path. Or, you could make changes to the theme after loading it (and before applying it). Theme Components Boxes TODO: Rename to edges? Location: theme/boxes Maps to: context.resources.boxes Boxes provide common measurements for borders, margins and padding in widget skins. Fields: outpad {x1, y1, x2, y2} : The intended amount of outer padding around the box. Sometimes used by the layout system. Does not affect the widget's width and height directly. Similar to \"margin\" in HTML/CSS. border {x1, y1, x2, y2} : An inward border that starts at the widget's edge. Usually precludes scroll bars, and may be used to designate a widget's draggable edges. Similar to \"border\" in HTML/CSS. margin {x1, y1, x2, y2} : Inward padding which begins at the border. Similar to \"padding\" in HTML/CSS. Fonts Location: theme/fonts Maps to: context.resources.fonts (as L\u00d6VE Fonts) Paths and settings for L\u00d6VE Fonts. Fields (Vector Fonts): path : The path to the font file, or default to use L\u00d6VE's built-in Font. size : The font's size. [fallbacks] : An optional array of fallback font information: path : The path to the fallback font. size : The fallback font's size. (This should almost always match the main font's size.) TODO: BMFont, ImageFont stuff Info Location: theme/info Maps to: context.resources.info Info is a miscellaneous collection of settings. Info: thimble_info Contains parameters for how the \"thimble\" (widget keyboard focus) is represented. TODO Info: window_frames Contains parameters for Window Frames. TODO Labels Location: theme/labels Maps to: context.resources.labels Text label styles for widgets. Fields: font : The Font ID to use when measuring and rendering label text. ul_color : An independent underline color (in the form of {R, G, B, A}), or false to use the text color. ul_h : Underline height or thickness. Scroll Bar Data Location: theme/scroll_bar_data Maps to: context.resources.scroll_bar_data Contains texture references, colors, and some settings for widget scroll bars. Fields: tquad_pixel : Quad reference for a single white pixel. Used when drawing flat rectangles. tq_arrow_down , tq_arrow_up , tq_arrow_left , tq_arrow_right : Quad references for the arrow graphics on the scroll buttons. render_body : (Boolean) When true, the entire scroll bar body is drawn. Could be helpful if the buttons and trough do not fit snugly into the scroll bar's rectangular body. body_color : (Color tuple) The body's color. col_trough : (Color tuple) The trough's color. shared : A table of sub-settings for the following states: idle , hover , press and disabled : slice : A slice reference for the scroll bar's thumb and buttons (one slice for both entities). col_body : The color for the thumb and buttons. col_symbol : The color for the arrow symbols on the buttons. Scroll Bar Styles Location: theme/scroll_bar_styles Maps to: context.resources.scroll_bar_styles Style settings for widget scroll bars. Fields: has_buttons : (Boolean) True if the scroll bars have buttons on the ends, which may be clicked to scroll the document in small increments. trough_enabled : (Boolean) True if the scroll bars have a clickable trough. thumb_enabled : (Boolean) True if the scroll bars have a clickable thumb. bar_size : The width of vertical scroll bars; the height of horizontal scroll bars. button_size : The desired height of buttons on vertical scroll bars; the desired width of buttons on horizontal scroll bars. (Buttons may be squished if there is not enough room.) thumb_size_min , thumb_size_max : The minimum and maximum length of the scroll bar thumb. v_near_side : (Boolean) Controls where vertical scroll bars are placed. true: right, false: left. v_auto_hide : (Boolean) When true, the vertical scroll bar is hidden when the viewport is large enough to show the document lengthwise. v_button1_enabled : (Boolean) True if the \"up\" button is enabled. ( has_buttons must also be true). v_button1_mode : How the button scrolls when clicked. (TODO: elaborate.) v_button2_enabled : (Boolean) True if the \"down\" button is enabled. ( has_buttons must also be true). v_button2_mode : How the button scrolls when clicked. (TODO: elaborate.) h_near_side : (Boolean) Controls where horitonzal scroll bars are placed. true: top, false: bottom. h_auto_hide : (Boolean) When true, the horizontal scroll bar is hidden when the viewport is large enough to show the document widthwise. h_button1_enabled : (Boolean) True if the \"left\" button is enabled. ( has_buttons must also be true). h_button1_mode : How the button scrolls when clicked. (TODO: elaborate.) h_button2_enabled : (Boolean) True if the \"right\" button is enabled. ( has_buttons must also be true). h_button2_mode : How the button scrolls when clicked. (TODO: elaborate.) Skins Location: theme.skins Maps to: context.resources.skins Skins control the overall look of widgets. Skinners are the rendering implementation; skins provide skinners with data. Textures Location: theme.textures Maps to: context.resources.textures Links textures to the theme. Fields: path : The path to the texture.","title":"Themes"},{"location":"reference/themes/#themes","text":"Themes define the UI's general look. A ProdUI theme is a plain hierchical table of settings and references to other data. When applied, its contents are vetted and then transferred to the UI Context. ProdUI ships with a default theme at prod_ui/theme , which can be loaded as a table with uiRes.loadDirectoryAsTable() . The result can be patched by mounting ZIP files on top of the theme's path. Or, you could make changes to the theme after loading it (and before applying it).","title":"Themes"},{"location":"reference/themes/#theme-components","text":"","title":"Theme Components"},{"location":"reference/themes/#boxes","text":"TODO: Rename to edges? Location: theme/boxes Maps to: context.resources.boxes Boxes provide common measurements for borders, margins and padding in widget skins. Fields: outpad {x1, y1, x2, y2} : The intended amount of outer padding around the box. Sometimes used by the layout system. Does not affect the widget's width and height directly. Similar to \"margin\" in HTML/CSS. border {x1, y1, x2, y2} : An inward border that starts at the widget's edge. Usually precludes scroll bars, and may be used to designate a widget's draggable edges. Similar to \"border\" in HTML/CSS. margin {x1, y1, x2, y2} : Inward padding which begins at the border. Similar to \"padding\" in HTML/CSS.","title":"Boxes"},{"location":"reference/themes/#fonts","text":"Location: theme/fonts Maps to: context.resources.fonts (as L\u00d6VE Fonts) Paths and settings for L\u00d6VE Fonts. Fields (Vector Fonts): path : The path to the font file, or default to use L\u00d6VE's built-in Font. size : The font's size. [fallbacks] : An optional array of fallback font information: path : The path to the fallback font. size : The fallback font's size. (This should almost always match the main font's size.) TODO: BMFont, ImageFont stuff","title":"Fonts"},{"location":"reference/themes/#info","text":"Location: theme/info Maps to: context.resources.info Info is a miscellaneous collection of settings.","title":"Info"},{"location":"reference/themes/#info-thimble_info","text":"Contains parameters for how the \"thimble\" (widget keyboard focus) is represented. TODO","title":"Info: thimble_info"},{"location":"reference/themes/#info-window_frames","text":"Contains parameters for Window Frames. TODO","title":"Info: window_frames"},{"location":"reference/themes/#labels","text":"Location: theme/labels Maps to: context.resources.labels Text label styles for widgets. Fields: font : The Font ID to use when measuring and rendering label text. ul_color : An independent underline color (in the form of {R, G, B, A}), or false to use the text color. ul_h : Underline height or thickness.","title":"Labels"},{"location":"reference/themes/#scroll-bar-data","text":"Location: theme/scroll_bar_data Maps to: context.resources.scroll_bar_data Contains texture references, colors, and some settings for widget scroll bars. Fields: tquad_pixel : Quad reference for a single white pixel. Used when drawing flat rectangles. tq_arrow_down , tq_arrow_up , tq_arrow_left , tq_arrow_right : Quad references for the arrow graphics on the scroll buttons. render_body : (Boolean) When true, the entire scroll bar body is drawn. Could be helpful if the buttons and trough do not fit snugly into the scroll bar's rectangular body. body_color : (Color tuple) The body's color. col_trough : (Color tuple) The trough's color. shared : A table of sub-settings for the following states: idle , hover , press and disabled : slice : A slice reference for the scroll bar's thumb and buttons (one slice for both entities). col_body : The color for the thumb and buttons. col_symbol : The color for the arrow symbols on the buttons.","title":"Scroll Bar Data"},{"location":"reference/themes/#scroll-bar-styles","text":"Location: theme/scroll_bar_styles Maps to: context.resources.scroll_bar_styles Style settings for widget scroll bars. Fields: has_buttons : (Boolean) True if the scroll bars have buttons on the ends, which may be clicked to scroll the document in small increments. trough_enabled : (Boolean) True if the scroll bars have a clickable trough. thumb_enabled : (Boolean) True if the scroll bars have a clickable thumb. bar_size : The width of vertical scroll bars; the height of horizontal scroll bars. button_size : The desired height of buttons on vertical scroll bars; the desired width of buttons on horizontal scroll bars. (Buttons may be squished if there is not enough room.) thumb_size_min , thumb_size_max : The minimum and maximum length of the scroll bar thumb. v_near_side : (Boolean) Controls where vertical scroll bars are placed. true: right, false: left. v_auto_hide : (Boolean) When true, the vertical scroll bar is hidden when the viewport is large enough to show the document lengthwise. v_button1_enabled : (Boolean) True if the \"up\" button is enabled. ( has_buttons must also be true). v_button1_mode : How the button scrolls when clicked. (TODO: elaborate.) v_button2_enabled : (Boolean) True if the \"down\" button is enabled. ( has_buttons must also be true). v_button2_mode : How the button scrolls when clicked. (TODO: elaborate.) h_near_side : (Boolean) Controls where horitonzal scroll bars are placed. true: top, false: bottom. h_auto_hide : (Boolean) When true, the horizontal scroll bar is hidden when the viewport is large enough to show the document widthwise. h_button1_enabled : (Boolean) True if the \"left\" button is enabled. ( has_buttons must also be true). h_button1_mode : How the button scrolls when clicked. (TODO: elaborate.) h_button2_enabled : (Boolean) True if the \"right\" button is enabled. ( has_buttons must also be true). h_button2_mode : How the button scrolls when clicked. (TODO: elaborate.)","title":"Scroll Bar Styles"},{"location":"reference/themes/#skins","text":"Location: theme.skins Maps to: context.resources.skins Skins control the overall look of widgets. Skinners are the rendering implementation; skins provide skinners with data.","title":"Skins"},{"location":"reference/themes/#textures","text":"Location: theme.textures Maps to: context.resources.textures Links textures to the theme. Fields: path : The path to the texture.","title":"Textures"},{"location":"reference/widget_callbacks/","text":"Widget Callbacks render Draws the widget (before its children). Call site context:draw() Signature def:render(os_x, os_y) Parameters os_x , os_y : (Number) X and Y offsets, in screen pixels. Returns Nothing. Notes The graphics state is already translated so that 0,0 is the top-left corner of the widget. The parameters os_x and os_y typically aren't needed, unless the widget needs to adjust the current scissor box. renderLast Draws the widget (after its children). Call site context:draw() Signature def:renderLast(os_x, os_y) Parameters os_x , os_y : (Number) X and Y offsets, in screen pixels. Returns Nothing. Notes See render for applicable notes. renderThimble Draws the visual representation of keyboard focus for a widget. Call site context:draw() Signature def:renderThimble(os_x, os_y) Parameters os_x , os_y : (Number) X and Y offsets, in screen pixels. Returns Nothing. ui_evaluateHover Determines if the mouse cursor is hovering over this widget. Call site mouseLogic.checkHover Signature def:ui_evaluateHover(mx, my, os_x, os_y) Parameters mx , my : (Number) The mouse cursor position in UI space. os_x , os_y : (Number) Position offsets, such that mx + os_x and my + os_y give the widget's top-left position in UI space. Returns True to indicate that this widget can be considered hovered, false if not. When returning true, this widget will be chosen only if none of its children also return true. ui_evaluatePress Determines if the mouse is pressing this widget. Call site mouseLogic.checkPressed Signature def:ui_evaluatePress(mx, my, os_x, os_y, button, istouch, presses) Parameters mx , my : (Number) The mouse cursor position in UI space. os_x , os_y : (Number) Position offsets, such that mx + os_x and my + os_y give the widget's top-left position in UI space. button : (Number) The pressed mouse button index. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed(). Returns True to indicate that this widget can be considered pressed, false if not. When returning true, this widget will be chosen only if none of its children also return true.","title":"Widget Callbacks"},{"location":"reference/widget_callbacks/#widget-callbacks","text":"","title":"Widget Callbacks"},{"location":"reference/widget_callbacks/#render","text":"Draws the widget (before its children).","title":"render"},{"location":"reference/widget_callbacks/#call-site","text":"context:draw()","title":"Call site"},{"location":"reference/widget_callbacks/#signature","text":"def:render(os_x, os_y)","title":"Signature"},{"location":"reference/widget_callbacks/#parameters","text":"os_x , os_y : (Number) X and Y offsets, in screen pixels.","title":"Parameters"},{"location":"reference/widget_callbacks/#returns","text":"Nothing.","title":"Returns"},{"location":"reference/widget_callbacks/#notes","text":"The graphics state is already translated so that 0,0 is the top-left corner of the widget. The parameters os_x and os_y typically aren't needed, unless the widget needs to adjust the current scissor box.","title":"Notes"},{"location":"reference/widget_callbacks/#renderlast","text":"Draws the widget (after its children).","title":"renderLast"},{"location":"reference/widget_callbacks/#call-site_1","text":"context:draw()","title":"Call site"},{"location":"reference/widget_callbacks/#signature_1","text":"def:renderLast(os_x, os_y)","title":"Signature"},{"location":"reference/widget_callbacks/#parameters_1","text":"os_x , os_y : (Number) X and Y offsets, in screen pixels.","title":"Parameters"},{"location":"reference/widget_callbacks/#returns_1","text":"Nothing.","title":"Returns"},{"location":"reference/widget_callbacks/#notes_1","text":"See render for applicable notes.","title":"Notes"},{"location":"reference/widget_callbacks/#renderthimble","text":"Draws the visual representation of keyboard focus for a widget.","title":"renderThimble"},{"location":"reference/widget_callbacks/#call-site_2","text":"context:draw()","title":"Call site"},{"location":"reference/widget_callbacks/#signature_2","text":"def:renderThimble(os_x, os_y)","title":"Signature"},{"location":"reference/widget_callbacks/#parameters_2","text":"os_x , os_y : (Number) X and Y offsets, in screen pixels.","title":"Parameters"},{"location":"reference/widget_callbacks/#returns_2","text":"Nothing.","title":"Returns"},{"location":"reference/widget_callbacks/#ui_evaluatehover","text":"Determines if the mouse cursor is hovering over this widget.","title":"ui_evaluateHover"},{"location":"reference/widget_callbacks/#call-site_3","text":"mouseLogic.checkHover","title":"Call site"},{"location":"reference/widget_callbacks/#signature_3","text":"def:ui_evaluateHover(mx, my, os_x, os_y)","title":"Signature"},{"location":"reference/widget_callbacks/#parameters_3","text":"mx , my : (Number) The mouse cursor position in UI space. os_x , os_y : (Number) Position offsets, such that mx + os_x and my + os_y give the widget's top-left position in UI space.","title":"Parameters"},{"location":"reference/widget_callbacks/#returns_3","text":"True to indicate that this widget can be considered hovered, false if not. When returning true, this widget will be chosen only if none of its children also return true.","title":"Returns"},{"location":"reference/widget_callbacks/#ui_evaluatepress","text":"Determines if the mouse is pressing this widget.","title":"ui_evaluatePress"},{"location":"reference/widget_callbacks/#call-site_4","text":"mouseLogic.checkPressed","title":"Call site"},{"location":"reference/widget_callbacks/#signature_4","text":"def:ui_evaluatePress(mx, my, os_x, os_y, button, istouch, presses)","title":"Signature"},{"location":"reference/widget_callbacks/#parameters_4","text":"mx , my : (Number) The mouse cursor position in UI space. os_x , os_y : (Number) Position offsets, such that mx + os_x and my + os_y give the widget's top-left position in UI space. button : (Number) The pressed mouse button index. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed().","title":"Parameters"},{"location":"reference/widget_callbacks/#returns_4","text":"True to indicate that this widget can be considered pressed, false if not. When returning true, this widget will be chosen only if none of its children also return true.","title":"Returns"},{"location":"reference/widget_event_callbacks/","text":"Widgets ProdUI uses a basic form of inheritance to provide methods to widgets. When an instance calls a method, it checks: Itself Its widget definition _mt_widget , the base table for all widgets This is implemented with Lua's built-in __index metamethod. Further subclassing is not supported. All widgets are axis aligned rectangles. Event Dispatch ProdUI supports four forms of event dispatch: self:sendEvent() : Just queries self . self:bubbleEvent() : Ascends from the target widget to the root. self:trickleEvent() : Descends from the root to the target widget. self:cycleEvent() : Trickles down, then bubbles up. The main event callbacks are attached to the widget's indexed metatable, like this: function def:uiCall_keyPressed(inst, key, scancode, isrepeat) These are used in direct , bubble , and the direct and bubble phases of cycle . Trickle callbacks are used less frequently, and are stored in a subtable in order to keep the two separated: function def.trickle:uiCall_keyPressed(inst, key, scancode, isrepeat) Note that the colon syntax is misleading here: we always call the function on the widget table directly, never on wid.trickle . Colon syntax is used only to maintain argument parity with the main callbacks in the source code (so that we don't have to add or remove 'self' when moving code snippets back and forth). Typically, the first argument after self is the original calling instance ( inst ). Propagation is halted as soon as a widget returns a value that evaluates to true. You can use if self == inst then... to differentiate between events acting on self and events that originate from an ancestor or a descendant. The UI Thimble \"Thimble\" is an arbitrary term for which widget currently has focus. The name is unlikely to be mistaken for other kinds of focus: OS window focus, in-application frame focus, mouse hover + press state, selections within menus, and so on. Generally, the widget which has the thimble is also the target for keyboard input. Lamentably, there are two thimbles: thimble1 and thimble2 . The first is for \"concrete\" widgets, while the second is for \"ephemeral\" components, like pop-up menus. The Top Thimble is the highest one that is currently assigned to a widget: +--------------------------------------------+ | thimble1 | thimble2 | Top Thimble is... | +----------+----------+----------------------+ | | | Neither | | x | | thimble1 | | | x | thimble2 | | x | x | thimble2 | +--------------------------------------------+ This system, unintuitive as it is, allows a concrete widget to know that it is still selected, even if key events are temporarily directed to an ephemeral widget. A Note on \"Capturing\" A widget can \"capture\" the UI context. When this happens, all prodUI events are passed to the widget first, and it has the option to deny the event from being handled further by the context. This can be used to implement custom behaviors without interference from the context or other widgets. While this enables some nice widget behaviors, be warned that capturing is prone to subtle input bugs. By default, if a capturing widget does not have a capture callback for an event type, then it is always passed on to the main event handler. You may need to capture events that have nothing to do with the desired behavior, and handle them appropriately or discard them. Consolidating similar capture behavior into shared functions is recommended. Reserved Field prefixes These fields are reserved by ProdUI in widget tables. lo_* : Layout system ly_* : Canvas layering sk_* : Skinner and skin data usr_* : Arbitrary user (application developer) variables vp_* , vp#_* : Viewport data (See: Widget Viewports) Fields with base widget metatable dummy values tag (empty string) A string you can use to help locate widgets. scr_x, scr_y : Scroll registers, applicable to a widget's children. awake : When false, the widget and its descendants are skipped when updating. can_have_thimble : When true, widget can obtain the thimble (the UI cursor). As a prerequisite, awake must also be true. allow_hover : When true, widget is eligible for the 'current_hover' context state. When false, it and all of its descendants are skipped. Fields with per-instance metatable dummy values id : The identifier value for the widget, as set when the widget def was loaded. Typically a string. Do not modify. Fields with defaults in the widget metatable x, y : (0, 0) Position of the widget relative to its parent's upper-left corner. w, h : (0, 0) Size of the widget body, in pixels. Must be at least zero. Fields set during instance creation (before uiCall_initialize()) context : a link to the UI Context that this widget belongs to. Do not modify. parent : a link to the widget's parent, or false if there is no parent. Do not modify. children : table of child widgets and further descendants. This table may be a dummy reference if '_no_descendants' was set in the def. Do not modify directly. Fields set during instance destruction _dead : Identifies widgets that are being removed or have already been removed. Can be read, but do not modify. * nil: the widget is still part of the context. * \"dying\": the widget is in the process of being removed from the context. * \"dead\": The widget has been removed from the context. Fields applicable to widgets with children hide_children : When true, children are not rendered. clip_scissor : When true, rendering of children is clipped to the widget's body. When \"manual\", the scissor region is specified in 'clip_scissor_x', 'clip_scissor_y', 'clip_scissor_w', and 'clip_scissor_h', relative to the top-left of the widget. NOTE: don't use math.huge with setScissor or intersectScissor. It will become zero. -2^16 and 2^17 seem OK. clip_hover : When true, mouse hover and click detection against children are clipped to the widget's body. When \"manual\", the clipping region is specified in 'clip_hover_x', 'clip_hover_y', 'clip_hover_w' and 'clip_hover_h'. _no_descendants : When true, upon widget creation, a special shared table is assigned to 'self.children'. This table raises an error if self:addChild() is used, or if anything assigns a new field via __newindex. Use with care: it cannot catch every instance of messing with the table. For example, rawset() and table.insert() do not invoke __newindex. Skin fields skin_id : Used when assigning the widget's skin. Skins allow the appearance of widgets to be customized. Not all widgets support skins, and most skins are designed for one or a few specific widgets or skinners (implementations). Once set, skin_id should not be modified, except as part of a skinner/skin replacement action. skinner , skin : The skinning implementation and data package, respectively. They are assigned to skinned widgets by self:skinSetRefs(). Avoid modifying these tables from the widget instance code, as the changes will affect all other widgets with the same skinner / skin. (The ProdUI demo changes skin data for illustrative purposes, but generally, active skins shouldn't be modified at run time.) Widget Viewports Viewports are rectangles that widgets can use for placement of their internals, and as the basis for built-in mouse sensors. Viewport #1: self.vp_x, self.vp_y, self.vp_w, self.vp_h Viewport #2: self.vp2_x, self.vp2_y, self.vp2_w, self.vp2_h Up to eight viewports per widget are permitted by the support code that manages them.","title":"Widgets"},{"location":"reference/widget_event_callbacks/#widgets","text":"ProdUI uses a basic form of inheritance to provide methods to widgets. When an instance calls a method, it checks: Itself Its widget definition _mt_widget , the base table for all widgets This is implemented with Lua's built-in __index metamethod. Further subclassing is not supported. All widgets are axis aligned rectangles.","title":"Widgets"},{"location":"reference/widget_event_callbacks/#event-dispatch","text":"ProdUI supports four forms of event dispatch: self:sendEvent() : Just queries self . self:bubbleEvent() : Ascends from the target widget to the root. self:trickleEvent() : Descends from the root to the target widget. self:cycleEvent() : Trickles down, then bubbles up. The main event callbacks are attached to the widget's indexed metatable, like this: function def:uiCall_keyPressed(inst, key, scancode, isrepeat) These are used in direct , bubble , and the direct and bubble phases of cycle . Trickle callbacks are used less frequently, and are stored in a subtable in order to keep the two separated: function def.trickle:uiCall_keyPressed(inst, key, scancode, isrepeat) Note that the colon syntax is misleading here: we always call the function on the widget table directly, never on wid.trickle . Colon syntax is used only to maintain argument parity with the main callbacks in the source code (so that we don't have to add or remove 'self' when moving code snippets back and forth). Typically, the first argument after self is the original calling instance ( inst ). Propagation is halted as soon as a widget returns a value that evaluates to true. You can use if self == inst then... to differentiate between events acting on self and events that originate from an ancestor or a descendant.","title":"Event Dispatch"},{"location":"reference/widget_event_callbacks/#the-ui-thimble","text":"\"Thimble\" is an arbitrary term for which widget currently has focus. The name is unlikely to be mistaken for other kinds of focus: OS window focus, in-application frame focus, mouse hover + press state, selections within menus, and so on. Generally, the widget which has the thimble is also the target for keyboard input. Lamentably, there are two thimbles: thimble1 and thimble2 . The first is for \"concrete\" widgets, while the second is for \"ephemeral\" components, like pop-up menus. The Top Thimble is the highest one that is currently assigned to a widget: +--------------------------------------------+ | thimble1 | thimble2 | Top Thimble is... | +----------+----------+----------------------+ | | | Neither | | x | | thimble1 | | | x | thimble2 | | x | x | thimble2 | +--------------------------------------------+ This system, unintuitive as it is, allows a concrete widget to know that it is still selected, even if key events are temporarily directed to an ephemeral widget.","title":"The UI Thimble"},{"location":"reference/widget_event_callbacks/#a-note-on-capturing","text":"A widget can \"capture\" the UI context. When this happens, all prodUI events are passed to the widget first, and it has the option to deny the event from being handled further by the context. This can be used to implement custom behaviors without interference from the context or other widgets. While this enables some nice widget behaviors, be warned that capturing is prone to subtle input bugs. By default, if a capturing widget does not have a capture callback for an event type, then it is always passed on to the main event handler. You may need to capture events that have nothing to do with the desired behavior, and handle them appropriately or discard them. Consolidating similar capture behavior into shared functions is recommended.","title":"A Note on \"Capturing\""},{"location":"reference/widget_event_callbacks/#reserved-field-prefixes","text":"These fields are reserved by ProdUI in widget tables. lo_* : Layout system ly_* : Canvas layering sk_* : Skinner and skin data usr_* : Arbitrary user (application developer) variables vp_* , vp#_* : Viewport data (See: Widget Viewports)","title":"Reserved Field prefixes"},{"location":"reference/widget_event_callbacks/#fields-with-base-widget-metatable-dummy-values","text":"tag (empty string) A string you can use to help locate widgets. scr_x, scr_y : Scroll registers, applicable to a widget's children. awake : When false, the widget and its descendants are skipped when updating. can_have_thimble : When true, widget can obtain the thimble (the UI cursor). As a prerequisite, awake must also be true. allow_hover : When true, widget is eligible for the 'current_hover' context state. When false, it and all of its descendants are skipped.","title":"Fields with base widget metatable dummy values"},{"location":"reference/widget_event_callbacks/#fields-with-per-instance-metatable-dummy-values","text":"id : The identifier value for the widget, as set when the widget def was loaded. Typically a string. Do not modify.","title":"Fields with per-instance metatable dummy values"},{"location":"reference/widget_event_callbacks/#fields-with-defaults-in-the-widget-metatable","text":"x, y : (0, 0) Position of the widget relative to its parent's upper-left corner. w, h : (0, 0) Size of the widget body, in pixels. Must be at least zero.","title":"Fields with defaults in the widget metatable"},{"location":"reference/widget_event_callbacks/#fields-set-during-instance-creation-before-uicall_initialize","text":"context : a link to the UI Context that this widget belongs to. Do not modify. parent : a link to the widget's parent, or false if there is no parent. Do not modify. children : table of child widgets and further descendants. This table may be a dummy reference if '_no_descendants' was set in the def. Do not modify directly.","title":"Fields set during instance creation (before uiCall_initialize())"},{"location":"reference/widget_event_callbacks/#fields-set-during-instance-destruction","text":"_dead : Identifies widgets that are being removed or have already been removed. Can be read, but do not modify. * nil: the widget is still part of the context. * \"dying\": the widget is in the process of being removed from the context. * \"dead\": The widget has been removed from the context.","title":"Fields set during instance destruction"},{"location":"reference/widget_event_callbacks/#fields-applicable-to-widgets-with-children","text":"hide_children : When true, children are not rendered. clip_scissor : When true, rendering of children is clipped to the widget's body. When \"manual\", the scissor region is specified in 'clip_scissor_x', 'clip_scissor_y', 'clip_scissor_w', and 'clip_scissor_h', relative to the top-left of the widget. NOTE: don't use math.huge with setScissor or intersectScissor. It will become zero. -2^16 and 2^17 seem OK. clip_hover : When true, mouse hover and click detection against children are clipped to the widget's body. When \"manual\", the clipping region is specified in 'clip_hover_x', 'clip_hover_y', 'clip_hover_w' and 'clip_hover_h'. _no_descendants : When true, upon widget creation, a special shared table is assigned to 'self.children'. This table raises an error if self:addChild() is used, or if anything assigns a new field via __newindex. Use with care: it cannot catch every instance of messing with the table. For example, rawset() and table.insert() do not invoke __newindex.","title":"Fields applicable to widgets with children"},{"location":"reference/widget_event_callbacks/#skin-fields","text":"skin_id : Used when assigning the widget's skin. Skins allow the appearance of widgets to be customized. Not all widgets support skins, and most skins are designed for one or a few specific widgets or skinners (implementations). Once set, skin_id should not be modified, except as part of a skinner/skin replacement action. skinner , skin : The skinning implementation and data package, respectively. They are assigned to skinned widgets by self:skinSetRefs(). Avoid modifying these tables from the widget instance code, as the changes will affect all other widgets with the same skinner / skin. (The ProdUI demo changes skin data for illustrative purposes, but generally, active skins shouldn't be modified at run time.)","title":"Skin fields"},{"location":"reference/widget_event_callbacks/#widget-viewports","text":"Viewports are rectangles that widgets can use for placement of their internals, and as the basis for built-in mouse sensors. Viewport #1: self.vp_x, self.vp_y, self.vp_w, self.vp_h Viewport #2: self.vp2_x, self.vp2_y, self.vp2_w, self.vp2_h Up to eight viewports per widget are permitted by the support code that manages them.","title":"Widget Viewports"},{"location":"reference/widget_events/","text":"Widget Events This page lists ProdUI's built-in widget events. uiCall_gamepadReleased A held gamepad button was released. Propagation Method TODO Event Origin love.gamepadreleased Signature def:uiCall_gamepadReleased(inst, joystick, button) Parameters inst (ui:Widget) The target widget instance. joystick (love:Joystick) The joystick associated with the event. button (love:GamepadButton) The ID of the released gamepad button. Returns True to halt event propagation. uiCall_gamepadAxis A gamepad axis moved. Propagation Method TODO Event Origin love.gamepadaxis Signature def:uiCall_gamepadAxis(inst, joystick, axis, value) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. value : (Number) The value of the axis. Returns True to halt event propagation. uiCall_gamepadPressed A gamepad button was pressed. Propagation Method TODO Event Origin love.gamepadpressed Signature def:uiCall_gamepadPressed(inst, joystick, button) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (love:GamepadButton) The button ID. Returns True to halt event propagation. uiCall_joystickHat A joystick POV hat moved. Propagation Method TODO Event Origin love.joystickhat Signature def:uiCall_joystickHat(inst, joystick, hat, direction) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. hat : (Number) The hat index. direction : (love:JoystickHat) The hat direction. Returns True to halt event propagation. uiCall_joystickAxis A joystick axis moved. Propagation Method TODO Event Origin love.joystickaxis Signature def:uiCall_joystickAxis(inst, joystick, axis, value) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. axis : (Number) The axis index. value : (Number) The axis value. Returns True to halt event propagation. uiCall_joystickReleased A joystick button was released. Propagation Method TODO Event Origin love.joystickreleased Signature def:uiCall_joystickReleased(inst, joystick, button) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (number) The button index. Returns True to halt event propagation. uiCall_joystickPressed A joystick button was pressed. Propagation Method TODO Event Origin love.joystickpressed Signature def:uiCall_joystickPressed(inst, joystick, button) Parameters inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (number) The button index. Returns True to halt event propagation. uiCall_windowVisible The application window's visibility changed. Propagation Method Sent to root. Event Origin love.visible Signature def:uiCall_windowVisible(visible) Parameters visible : (Boolean) True if the window is visible, false if not. Returns Nothing. uiCall_windowResize The application window was resized. Propagation Method Sent to root. Event Origin love.resize Signature def:uiCall_windowResize(w, h) Parameters w , h : (Number) The new window width and height. Returns Nothing. uiCall_joystickAdded A joystick was connected. Propagation Method Sent to root. Event Origin love.joystickadded Signature def:uiCall_joystickAdded(joystick) Parameters joystick : (love:Joystick) The joystick associated with the event. Returns Nothing. uiCall_joystickRemoved A joystick was disconnected. Propagation Method Sent to root. Event Origin love.joystickremoved Signature def:uiCall_joystickRemoved(joystick) Parameters joystick : (love:Joystick) The joystick associated with the event. Returns Nothing. uiCall_update A per-frame update callback for widgets. Propagation Method Broadcast down. Event Origin love.update Signature def:uiCall_update(dt) Parameters dt : (Number) This frame's delta time. Returns True to halt event propagation to this widget's children. Notes This is run in prodUI.love_update() , starting with context.root and traversing its children depth-first. Return true to explicitly prevent updating a widget's children. (If uiCall_update doesn't exist in the widget, children will be updated.) There are many limitations in effect when the context is locked for updating. Anything that is likely to mess up tree traversal (remove or reorder widgets; change tree root) will raise an error. You can defer these actions to after the update loop using context:appendAsyncAction() . Widgets may or may not have a built-in uiCall_update method. To run your own per-frame behavior, you can assign self:userUpdate(dt) , which is run before uiCall_update . uiCall_windowFocus The application window focus changed. Propagation Method Sent to root. Event Origin love.focus Signature def:uiCall_windowFocus(focus) Parameters focus : (Boolean) True if the window has focus, false if not. Returns Nothing. uiCall_mouseFocus The application window's mouse focus changed. Propagation Method Sent to root. Event Origin love.mousefocus Signature def:uiCall_mouseFocus(focus) Parameters focus : (Boolean) True if the window has mouse focus, false if not. Returns Nothing. uiCall_reshape A widget called self:reshape() or self:reshapeDescendants() . Propagation Method Broadcast down. Event Origin widget:reshape() widget:reshapeDescendants() Signature def:uiCall_reshape() Returns True to halt event propagation. Notes Be careful about calling wid:reshape() on children within uiCall_reshape() , since wid:reshape() itself can call descendants recursively. Reshaping is intended to modify a widget's content (children, minor visual details etc.), and not its current dimensions and position within its parent. There are some exceptions: 1) The root widget doesn't have a parent, so it makes sense to update its dimensions to match the application window. 2) You have free-floating window frames which must be clamped to their parent container, and their positions and sizes do not affect their siblings. uiCall_initialize A new widget is being initialized. Propagation Method Sent to widget. Event Origin widget:initialize() Signature def:uiCall_initialize(...) Parameters ... : (Any) Arguments for the widget setup callback. Returns Nothing. Notes In your documentation, please list: Mandatory ahead-of-time fields Optional ahead-of-time fields Assume that all other fields are assigned defaults, and that the caller must set them after successful instance creation. If present, self:userInitialize() is run after this. (It's incredibly redundant as you have to pass it in ahead of time, but it pairs with self:userDestroy() .) uiCall_destroy A widget was removed from the context. Propagation Method bubbleEvent. Event Origin widget:remove() Signature def:uiCall_destroy(inst) Parameters inst : (ui:Widget) The target widget instance. Returns True to halt event propagation. Notes If present, widget:userDestroy() is run before this. uiCall_pointerHoverOn The mouse pointer entered a widget's bounding rectangle. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerHoverOn(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. Notes Hover events are postponed while any mouse button is held. uiCall_pointerHoverOff The mouse pointer left a widget's bounding rectangle. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerHoverOff(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. Notes Hover events are postponed while any mouse button is held. uiCall_pointerHover The mouse pointer is resting or moving over a widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerHover(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. uiCall_pointerPress The mouse cursor pressed down on a widget. Propagation Method cycleEvent. Event Origin love.mousepressed Signature def:uiCall_pointerPress(inst, x, y, button, istouch, presses) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() . Returns True to halt event propagation. Notes This event does not trigger if no widget was clicked (ie the root disables mouse-hover, which in turn prevents clicking on it and all descendants). If you want to consider only one pressed button at a time, use: if button == self.context.mouse_pressed_button then ... uiCall_pointerPressRepeat Called periodically after the the mouse has remained pressed on a widget for some time. Propagation Method cycleEvent. Event Origin love.update Signature def:uiCall_pointerPressRepeat(inst, x, y, button, istouch, reps) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. reps : (Number) The number of consecutive repeat events emitted up to this point, starting at 1. Returns True to halt event propagation. Notes This is a virtual event, with no equivalent L\u00d6VE callback. This event will emit even if the pointer leaves the pressed widget's area. The initial delay and repeat-rate are controlled by the UI Context. This event will only fire in relation to the button value held in self.context.mouse_pressed_button , so the check suggested in uiCall_pointerPress() is not necessary here (but including it would cause no harm). uiCall_pointerRelease The mouse cursor stopped pressing on a widget, and the cursor was within the widget's bounds. Propagation Method cycleEvent. Event Origin love.mousereleased Signature def:uiCall_pointerRelease(inst, x, y, button, istouch, presses) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. reps : (Number) The number of consecutive repeat events emitted up to this point, starting at 1. Returns True to halt event propagation. Notes This event only emits if the mouse cursor is over the widget that is designated as \"currently-pressed\" by the context. uiCall_pointerUnpress The mouse stopped pressing on a widget. Propagation Method cycleEvent. Event Origin love.mousereleased Signature def:uiCall_pointerUnpress(inst, x, y, button, istouch, presses) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() . Returns True to halt event propagation. Notes This event will emit even if the mouse cursor has left the currently-pressed widget. uiCall_pointerDrag The mouse cursor is pressing on this widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerDrag(inst, x, y, dx, dy) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. dx , dy : (Number) The mouse position's delta from the previous frame, if applicable. Returns True to halt event propagation. Notes Called on every frame. uiCall_pointerWheel The mouse wheel moved. Propagation Method cycleEvent. Event Origin love.wheelmoved Signature def:uiCall_pointerWheel(x, y) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The wheel's movement vector. Returns True to halt event propagation. uiCall_pointerDragDestOn The mouse cursor, while pressing, dragged itself onto this widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerDragDestOn(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. Notes Drag-Dest events are intended to help with widget-to-widget drag-and-drop actions. The instance here is a widget that the mouse is overlapping while some other widget is being pressed. Think of the instance as the destination, and the current_pressed widget as the source. More Notes Source and destination can be the same widget. A reference to Source is not provided in the function arguments, but it can be found by reading self.context.current_pressed . Source could be destroyed before the drag-and-drop action is completed. Or, the circumstances could have changed. Unfortunately, you will have to do some extra work to ensure that the transaction is valid. uiCall_pointerDragDestOff The mouse cursor, while pressing, moved off of this widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerDragDestOff(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. uiCall_pointerDragDestMove The mouse, while pressing, is currently over this widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerDragDestMove(inst, mouse_x, mouse_y, mouse_dx, mouse_dy) Parameters inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable. Returns True to halt event propagation. Notes Like uiCall_pointerHover , this runs even if there is no mouse movement on a given frame. It should probably be renamed. uiCall_pointerDragDestRelease The mouse cursor released a button while over this widget. Propagation Method cycleEvent. Event Origin love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved Signature def:uiCall_pointerDragDestRelease(inst, x, y, button, istouch, presses) Parameters inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() . Returns True to halt event propagation. uiCall_thimble1Take A widget took thimble1 . Propagation Method cycleEvent. Event Origin widget:takeThimble1() Signature def:uiCall_thimble1Take(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimble2Take A widget took thimble2 . Propagation Method cycleEvent. Event Origin widget:takeThimble2() Signature def:uiCall_thimble1Take(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimble1Release A widget released or lost thimble1 . Propagation Method cycleEvent. Event Origin widget:releaseThimble1() Signature def:uiCall_thimble1Release(inst, a, b, c, d) Parameters{ inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimble2Release A widget released thimble2. Propagation Method cycleEvent. Event Origin widget:takeThimble2() widget:releaseThimble2() Signature def:uiCall_thimble2Release(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimbleTopTake A widget got the top thimble. Propagation Method cycleEvent. Event Origin widget:takeThimble1() widget:takeThimble2() widget:releaseThimble2() Signature def:uiCall_thimbleTopTake(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimbleTopRelease A widget lost the top thimble. Propagation Method cycleEvent. Event Origin widget:takeThimble2() widget:releaseThimble1() widget:releaseThimble2() Signature def:uiCall_thimbleTopRelease(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimble1Changed Emitted to the holder of thimble2 when thimble1 changes. Propagation Method cycleEvent. Event Origin widget:takeThimble1() widget:releaseThimble1() Signature def:uiCall_thimble1Changed(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimble2Changed Emitted to the holder of thimble1 when thimble2 changes. Propagation Method cycleEvent. Event Origin widget:takeThimble2() widget:releaseThimble2() Signature def:uiCall_thimble2Changed(inst, a, b, c, d) Parameters inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation. Returns True to halt event propagation. uiCall_thimbleAction The user pressed enter/return or space while this widget had the thimble. Propagation Method cycleEvent. Event Origin WIMP Root. Signature def:uiCall_thimbleAction(inst, key, scancode, isrepeat) Parameters inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event. Returns True to halt event propagation. Notes The enter key fires repeatedly, while space only fires once per press. uiCall_thimbleAction2 The user pressed the Application key or Shift+F10 while a widget had the thimble. Propagation Method cycleEvent. Event Origin WIMP Root Signature def:uiCall_thimbleAction2(inst, key, scancode, isrepeat) Parameters inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event. Returns True to halt event propagation. Notes Does not fire repeatedly. uiCall_keyPressed The user pressed a key while this widget had the thimble. Propagation Method cycleEvent. Event Origin love.keypressed Signature def:uiCall_keyPressed(inst, key, scancode, isrepeat, hot_key, hot_scan) Parameters inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event. hot_key : (String) A hotkey string, as determined by the current pressed key combined with the state of modifier keys. This field is false when a valid hotkey string cannot be generated (the pressed key must not be a modifier). hot_scan : (String) A hotkey string, as determined by the current pressed scancode combined with the state of modifier keys. This field is false when a valid hotkey string cannot be generated (the pressed scancode must not be a modifier). Returns True to halt event propagation. uiCall_keyReleased The user released a key while this widget had the thimble. Propagation Method cycleEvent. Event Origin love.keyreleased Signature def:uiCall_keyReleased(inst, key, scancode) Parameters inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). Returns True to halt event propagation. uiCall_textInput The user inputted text. Propagation Method cycleEvent. Event Origin love.textinput Signature def:uiCall_textInput(inst, text) Parameters inst : (ui:Widget) The target widget instance. text : (String) The text. Returns True to halt event propagation. Notes This event is independent of keyboard key-down and key-up events. L\u00d6VE text input must be enabled for this event to fire. The context checks the UTF-8 encoding of the text before invoking the event. uiCall_fileDropped The user dropped a file onto the application window. Propagation Method cycleEvent. Event Origin love.filedropped Signature def:uiCall_fileDropped(inst, file) Parameters inst : (ui:Widget) The target widget instance. file : (love:DroppedFile) The file object. Returns True to halt event propagation. Notes Refer to the L\u00d6VE Wiki for information on how to work with the file argument. uiCall_directoryDropped The user dropped a directory onto the application window. Propagation Method cycleEvent. Event Origin love.directorydropped Signature def:uiCall_directoryDropped(inst, path) Parameters inst : (ui:Widget) The target widget instance. path : (String) The directory path. Returns True to halt event propagation. Notes Refer to the L\u00d6VE Wiki for information on how to work with the path argument. uiCall_capture A widget started capturing events from the context. Propagation Method sendEvent. Event Origin widget:captureFocus() Signature def:uiCall_capture(inst) Returns Nothing. uiCall_uncapture A widget stopped capturing events from the context. Propagation Method sendEvent. Event Origin widget:captureFocus() widget:uncaptureFocus() Signature def:uiCall_uncapture(inst) Returns Nothing. uiCall_captureTick Runs on the start of every frame when the widget is capturing events from the context. Propagation Method sendEvent. Event Origin love.update Signature def:uiCall_captureTick(dt) Parameters dt : (Number) The delta time from love.update() . Returns False to prevent other widgets from updating on this frame. uiCall_quit Runs on the root widget when the application is quitting. Propagation Method sendEvent. Event Origin love.quit Signature def:uiCall_quit() Returns True to prevent the application from quitting.","title":"Widget Events"},{"location":"reference/widget_events/#widget-events","text":"This page lists ProdUI's built-in widget events.","title":"Widget Events"},{"location":"reference/widget_events/#uicall_gamepadreleased","text":"A held gamepad button was released.","title":"uiCall_gamepadReleased"},{"location":"reference/widget_events/#propagation-method","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin","text":"love.gamepadreleased","title":"Event Origin"},{"location":"reference/widget_events/#signature","text":"def:uiCall_gamepadReleased(inst, joystick, button)","title":"Signature"},{"location":"reference/widget_events/#parameters","text":"inst (ui:Widget) The target widget instance. joystick (love:Joystick) The joystick associated with the event. button (love:GamepadButton) The ID of the released gamepad button.","title":"Parameters"},{"location":"reference/widget_events/#returns","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_gamepadaxis","text":"A gamepad axis moved.","title":"uiCall_gamepadAxis"},{"location":"reference/widget_events/#propagation-method_1","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_1","text":"love.gamepadaxis","title":"Event Origin"},{"location":"reference/widget_events/#signature_1","text":"def:uiCall_gamepadAxis(inst, joystick, axis, value)","title":"Signature"},{"location":"reference/widget_events/#parameters_1","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. value : (Number) The value of the axis.","title":"Parameters"},{"location":"reference/widget_events/#returns_1","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_gamepadpressed","text":"A gamepad button was pressed.","title":"uiCall_gamepadPressed"},{"location":"reference/widget_events/#propagation-method_2","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_2","text":"love.gamepadpressed","title":"Event Origin"},{"location":"reference/widget_events/#signature_2","text":"def:uiCall_gamepadPressed(inst, joystick, button)","title":"Signature"},{"location":"reference/widget_events/#parameters_2","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (love:GamepadButton) The button ID.","title":"Parameters"},{"location":"reference/widget_events/#returns_2","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickhat","text":"A joystick POV hat moved.","title":"uiCall_joystickHat"},{"location":"reference/widget_events/#propagation-method_3","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_3","text":"love.joystickhat","title":"Event Origin"},{"location":"reference/widget_events/#signature_3","text":"def:uiCall_joystickHat(inst, joystick, hat, direction)","title":"Signature"},{"location":"reference/widget_events/#parameters_3","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. hat : (Number) The hat index. direction : (love:JoystickHat) The hat direction.","title":"Parameters"},{"location":"reference/widget_events/#returns_3","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickaxis","text":"A joystick axis moved.","title":"uiCall_joystickAxis"},{"location":"reference/widget_events/#propagation-method_4","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_4","text":"love.joystickaxis","title":"Event Origin"},{"location":"reference/widget_events/#signature_4","text":"def:uiCall_joystickAxis(inst, joystick, axis, value)","title":"Signature"},{"location":"reference/widget_events/#parameters_4","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. axis : (Number) The axis index. value : (Number) The axis value.","title":"Parameters"},{"location":"reference/widget_events/#returns_4","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickreleased","text":"A joystick button was released.","title":"uiCall_joystickReleased"},{"location":"reference/widget_events/#propagation-method_5","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_5","text":"love.joystickreleased","title":"Event Origin"},{"location":"reference/widget_events/#signature_5","text":"def:uiCall_joystickReleased(inst, joystick, button)","title":"Signature"},{"location":"reference/widget_events/#parameters_5","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (number) The button index.","title":"Parameters"},{"location":"reference/widget_events/#returns_5","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickpressed","text":"A joystick button was pressed.","title":"uiCall_joystickPressed"},{"location":"reference/widget_events/#propagation-method_6","text":"TODO","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_6","text":"love.joystickpressed","title":"Event Origin"},{"location":"reference/widget_events/#signature_6","text":"def:uiCall_joystickPressed(inst, joystick, button)","title":"Signature"},{"location":"reference/widget_events/#parameters_6","text":"inst : (ui:Widget) The target widget instance. joystick : (love:Joystick) The joystick associated with the event. button : (number) The button index.","title":"Parameters"},{"location":"reference/widget_events/#returns_6","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_windowvisible","text":"The application window's visibility changed.","title":"uiCall_windowVisible"},{"location":"reference/widget_events/#propagation-method_7","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_7","text":"love.visible","title":"Event Origin"},{"location":"reference/widget_events/#signature_7","text":"def:uiCall_windowVisible(visible)","title":"Signature"},{"location":"reference/widget_events/#parameters_7","text":"visible : (Boolean) True if the window is visible, false if not.","title":"Parameters"},{"location":"reference/widget_events/#returns_7","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_windowresize","text":"The application window was resized.","title":"uiCall_windowResize"},{"location":"reference/widget_events/#propagation-method_8","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_8","text":"love.resize","title":"Event Origin"},{"location":"reference/widget_events/#signature_8","text":"def:uiCall_windowResize(w, h)","title":"Signature"},{"location":"reference/widget_events/#parameters_8","text":"w , h : (Number) The new window width and height.","title":"Parameters"},{"location":"reference/widget_events/#returns_8","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickadded","text":"A joystick was connected.","title":"uiCall_joystickAdded"},{"location":"reference/widget_events/#propagation-method_9","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_9","text":"love.joystickadded","title":"Event Origin"},{"location":"reference/widget_events/#signature_9","text":"def:uiCall_joystickAdded(joystick)","title":"Signature"},{"location":"reference/widget_events/#parameters_9","text":"joystick : (love:Joystick) The joystick associated with the event.","title":"Parameters"},{"location":"reference/widget_events/#returns_9","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_joystickremoved","text":"A joystick was disconnected.","title":"uiCall_joystickRemoved"},{"location":"reference/widget_events/#propagation-method_10","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_10","text":"love.joystickremoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_10","text":"def:uiCall_joystickRemoved(joystick)","title":"Signature"},{"location":"reference/widget_events/#parameters_10","text":"joystick : (love:Joystick) The joystick associated with the event.","title":"Parameters"},{"location":"reference/widget_events/#returns_10","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_update","text":"A per-frame update callback for widgets.","title":"uiCall_update"},{"location":"reference/widget_events/#propagation-method_11","text":"Broadcast down.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_11","text":"love.update","title":"Event Origin"},{"location":"reference/widget_events/#signature_11","text":"def:uiCall_update(dt)","title":"Signature"},{"location":"reference/widget_events/#parameters_11","text":"dt : (Number) This frame's delta time.","title":"Parameters"},{"location":"reference/widget_events/#returns_11","text":"True to halt event propagation to this widget's children.","title":"Returns"},{"location":"reference/widget_events/#notes","text":"This is run in prodUI.love_update() , starting with context.root and traversing its children depth-first. Return true to explicitly prevent updating a widget's children. (If uiCall_update doesn't exist in the widget, children will be updated.) There are many limitations in effect when the context is locked for updating. Anything that is likely to mess up tree traversal (remove or reorder widgets; change tree root) will raise an error. You can defer these actions to after the update loop using context:appendAsyncAction() . Widgets may or may not have a built-in uiCall_update method. To run your own per-frame behavior, you can assign self:userUpdate(dt) , which is run before uiCall_update .","title":"Notes"},{"location":"reference/widget_events/#uicall_windowfocus","text":"The application window focus changed.","title":"uiCall_windowFocus"},{"location":"reference/widget_events/#propagation-method_12","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_12","text":"love.focus","title":"Event Origin"},{"location":"reference/widget_events/#signature_12","text":"def:uiCall_windowFocus(focus)","title":"Signature"},{"location":"reference/widget_events/#parameters_12","text":"focus : (Boolean) True if the window has focus, false if not.","title":"Parameters"},{"location":"reference/widget_events/#returns_12","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_mousefocus","text":"The application window's mouse focus changed.","title":"uiCall_mouseFocus"},{"location":"reference/widget_events/#propagation-method_13","text":"Sent to root.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_13","text":"love.mousefocus","title":"Event Origin"},{"location":"reference/widget_events/#signature_13","text":"def:uiCall_mouseFocus(focus)","title":"Signature"},{"location":"reference/widget_events/#parameters_13","text":"focus : (Boolean) True if the window has mouse focus, false if not.","title":"Parameters"},{"location":"reference/widget_events/#returns_13","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_reshape","text":"A widget called self:reshape() or self:reshapeDescendants() .","title":"uiCall_reshape"},{"location":"reference/widget_events/#propagation-method_14","text":"Broadcast down.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_14","text":"widget:reshape() widget:reshapeDescendants()","title":"Event Origin"},{"location":"reference/widget_events/#signature_14","text":"def:uiCall_reshape()","title":"Signature"},{"location":"reference/widget_events/#returns_14","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_1","text":"Be careful about calling wid:reshape() on children within uiCall_reshape() , since wid:reshape() itself can call descendants recursively. Reshaping is intended to modify a widget's content (children, minor visual details etc.), and not its current dimensions and position within its parent. There are some exceptions: 1) The root widget doesn't have a parent, so it makes sense to update its dimensions to match the application window. 2) You have free-floating window frames which must be clamped to their parent container, and their positions and sizes do not affect their siblings.","title":"Notes"},{"location":"reference/widget_events/#uicall_initialize","text":"A new widget is being initialized.","title":"uiCall_initialize"},{"location":"reference/widget_events/#propagation-method_15","text":"Sent to widget.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_15","text":"widget:initialize()","title":"Event Origin"},{"location":"reference/widget_events/#signature_15","text":"def:uiCall_initialize(...)","title":"Signature"},{"location":"reference/widget_events/#parameters_14","text":"... : (Any) Arguments for the widget setup callback.","title":"Parameters"},{"location":"reference/widget_events/#returns_15","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#notes_2","text":"In your documentation, please list: Mandatory ahead-of-time fields Optional ahead-of-time fields Assume that all other fields are assigned defaults, and that the caller must set them after successful instance creation. If present, self:userInitialize() is run after this. (It's incredibly redundant as you have to pass it in ahead of time, but it pairs with self:userDestroy() .)","title":"Notes"},{"location":"reference/widget_events/#uicall_destroy","text":"A widget was removed from the context.","title":"uiCall_destroy"},{"location":"reference/widget_events/#propagation-method_16","text":"bubbleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_16","text":"widget:remove()","title":"Event Origin"},{"location":"reference/widget_events/#signature_16","text":"def:uiCall_destroy(inst)","title":"Signature"},{"location":"reference/widget_events/#parameters_15","text":"inst : (ui:Widget) The target widget instance.","title":"Parameters"},{"location":"reference/widget_events/#returns_16","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_3","text":"If present, widget:userDestroy() is run before this.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerhoveron","text":"The mouse pointer entered a widget's bounding rectangle.","title":"uiCall_pointerHoverOn"},{"location":"reference/widget_events/#propagation-method_17","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_17","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_17","text":"def:uiCall_pointerHoverOn(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_16","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_17","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_4","text":"Hover events are postponed while any mouse button is held.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerhoveroff","text":"The mouse pointer left a widget's bounding rectangle.","title":"uiCall_pointerHoverOff"},{"location":"reference/widget_events/#propagation-method_18","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_18","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_18","text":"def:uiCall_pointerHoverOff(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_17","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_18","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_5","text":"Hover events are postponed while any mouse button is held.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerhover","text":"The mouse pointer is resting or moving over a widget.","title":"uiCall_pointerHover"},{"location":"reference/widget_events/#propagation-method_19","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_19","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_19","text":"def:uiCall_pointerHover(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_18","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_19","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_pointerpress","text":"The mouse cursor pressed down on a widget.","title":"uiCall_pointerPress"},{"location":"reference/widget_events/#propagation-method_20","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_20","text":"love.mousepressed","title":"Event Origin"},{"location":"reference/widget_events/#signature_20","text":"def:uiCall_pointerPress(inst, x, y, button, istouch, presses)","title":"Signature"},{"location":"reference/widget_events/#parameters_19","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() .","title":"Parameters"},{"location":"reference/widget_events/#returns_20","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_6","text":"This event does not trigger if no widget was clicked (ie the root disables mouse-hover, which in turn prevents clicking on it and all descendants). If you want to consider only one pressed button at a time, use: if button == self.context.mouse_pressed_button then ...","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerpressrepeat","text":"Called periodically after the the mouse has remained pressed on a widget for some time.","title":"uiCall_pointerPressRepeat"},{"location":"reference/widget_events/#propagation-method_21","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_21","text":"love.update","title":"Event Origin"},{"location":"reference/widget_events/#signature_21","text":"def:uiCall_pointerPressRepeat(inst, x, y, button, istouch, reps)","title":"Signature"},{"location":"reference/widget_events/#parameters_20","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. reps : (Number) The number of consecutive repeat events emitted up to this point, starting at 1.","title":"Parameters"},{"location":"reference/widget_events/#returns_21","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_7","text":"This is a virtual event, with no equivalent L\u00d6VE callback. This event will emit even if the pointer leaves the pressed widget's area. The initial delay and repeat-rate are controlled by the UI Context. This event will only fire in relation to the button value held in self.context.mouse_pressed_button , so the check suggested in uiCall_pointerPress() is not necessary here (but including it would cause no harm).","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerrelease","text":"The mouse cursor stopped pressing on a widget, and the cursor was within the widget's bounds.","title":"uiCall_pointerRelease"},{"location":"reference/widget_events/#propagation-method_22","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_22","text":"love.mousereleased","title":"Event Origin"},{"location":"reference/widget_events/#signature_22","text":"def:uiCall_pointerRelease(inst, x, y, button, istouch, presses)","title":"Signature"},{"location":"reference/widget_events/#parameters_21","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. reps : (Number) The number of consecutive repeat events emitted up to this point, starting at 1.","title":"Parameters"},{"location":"reference/widget_events/#returns_22","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_8","text":"This event only emits if the mouse cursor is over the widget that is designated as \"currently-pressed\" by the context.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerunpress","text":"The mouse stopped pressing on a widget.","title":"uiCall_pointerUnpress"},{"location":"reference/widget_events/#propagation-method_23","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_23","text":"love.mousereleased","title":"Event Origin"},{"location":"reference/widget_events/#signature_23","text":"def:uiCall_pointerUnpress(inst, x, y, button, istouch, presses)","title":"Signature"},{"location":"reference/widget_events/#parameters_22","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() .","title":"Parameters"},{"location":"reference/widget_events/#returns_23","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_9","text":"This event will emit even if the mouse cursor has left the currently-pressed widget.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerdrag","text":"The mouse cursor is pressing on this widget.","title":"uiCall_pointerDrag"},{"location":"reference/widget_events/#propagation-method_24","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_24","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_24","text":"def:uiCall_pointerDrag(inst, x, y, dx, dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_23","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. dx , dy : (Number) The mouse position's delta from the previous frame, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_24","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_10","text":"Called on every frame.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerwheel","text":"The mouse wheel moved.","title":"uiCall_pointerWheel"},{"location":"reference/widget_events/#propagation-method_25","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_25","text":"love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_25","text":"def:uiCall_pointerWheel(x, y)","title":"Signature"},{"location":"reference/widget_events/#parameters_24","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The wheel's movement vector.","title":"Parameters"},{"location":"reference/widget_events/#returns_25","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_pointerdragdeston","text":"The mouse cursor, while pressing, dragged itself onto this widget.","title":"uiCall_pointerDragDestOn"},{"location":"reference/widget_events/#propagation-method_26","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_26","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_26","text":"def:uiCall_pointerDragDestOn(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_25","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_26","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_11","text":"Drag-Dest events are intended to help with widget-to-widget drag-and-drop actions. The instance here is a widget that the mouse is overlapping while some other widget is being pressed. Think of the instance as the destination, and the current_pressed widget as the source.","title":"Notes"},{"location":"reference/widget_events/#more-notes","text":"Source and destination can be the same widget. A reference to Source is not provided in the function arguments, but it can be found by reading self.context.current_pressed . Source could be destroyed before the drag-and-drop action is completed. Or, the circumstances could have changed. Unfortunately, you will have to do some extra work to ensure that the transaction is valid.","title":"More Notes"},{"location":"reference/widget_events/#uicall_pointerdragdestoff","text":"The mouse cursor, while pressing, moved off of this widget.","title":"uiCall_pointerDragDestOff"},{"location":"reference/widget_events/#propagation-method_27","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_27","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_27","text":"def:uiCall_pointerDragDestOff(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_26","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_27","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_pointerdragdestmove","text":"The mouse, while pressing, is currently over this widget.","title":"uiCall_pointerDragDestMove"},{"location":"reference/widget_events/#propagation-method_28","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_28","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_28","text":"def:uiCall_pointerDragDestMove(inst, mouse_x, mouse_y, mouse_dx, mouse_dy)","title":"Signature"},{"location":"reference/widget_events/#parameters_27","text":"inst : (ui:Widget) The target widget instance. mouse_x , mouse_y : (Number) Mouse cursor position, relative to the application window. mouse_dx , mouse_dy : (Number) Relative mouse delta from its last position, if applicable.","title":"Parameters"},{"location":"reference/widget_events/#returns_28","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_12","text":"Like uiCall_pointerHover , this runs even if there is no mouse movement on a given frame. It should probably be renamed.","title":"Notes"},{"location":"reference/widget_events/#uicall_pointerdragdestrelease","text":"The mouse cursor released a button while over this widget.","title":"uiCall_pointerDragDestRelease"},{"location":"reference/widget_events/#propagation-method_29","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_29","text":"love.mousemoved love.mousepressed love.mousereleased love.update love.wheelmoved","title":"Event Origin"},{"location":"reference/widget_events/#signature_29","text":"def:uiCall_pointerDragDestRelease(inst, x, y, button, istouch, presses)","title":"Signature"},{"location":"reference/widget_events/#parameters_28","text":"inst : (ui:Widget) The target widget instance. x , y : (Number) The mouse cursor position. button : (Number) The index of the the pressed mouse button. istouch : (Boolean) True if this is a touch event. presses : (Number) The number of consecutive presses, as determined by love.mousepressed() .","title":"Parameters"},{"location":"reference/widget_events/#returns_29","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble1take","text":"A widget took thimble1 .","title":"uiCall_thimble1Take"},{"location":"reference/widget_events/#propagation-method_30","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_30","text":"widget:takeThimble1()","title":"Event Origin"},{"location":"reference/widget_events/#signature_30","text":"def:uiCall_thimble1Take(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_29","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_30","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble2take","text":"A widget took thimble2 .","title":"uiCall_thimble2Take"},{"location":"reference/widget_events/#propagation-method_31","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_31","text":"widget:takeThimble2()","title":"Event Origin"},{"location":"reference/widget_events/#signature_31","text":"def:uiCall_thimble1Take(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_30","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_31","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble1release","text":"A widget released or lost thimble1 .","title":"uiCall_thimble1Release"},{"location":"reference/widget_events/#propagation-method_32","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_32","text":"widget:releaseThimble1()","title":"Event Origin"},{"location":"reference/widget_events/#signature_32","text":"def:uiCall_thimble1Release(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_31","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters{"},{"location":"reference/widget_events/#returns_32","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble2release","text":"A widget released thimble2.","title":"uiCall_thimble2Release"},{"location":"reference/widget_events/#propagation-method_33","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_33","text":"widget:takeThimble2() widget:releaseThimble2()","title":"Event Origin"},{"location":"reference/widget_events/#signature_33","text":"def:uiCall_thimble2Release(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_32","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_33","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimbletoptake","text":"A widget got the top thimble.","title":"uiCall_thimbleTopTake"},{"location":"reference/widget_events/#propagation-method_34","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_34","text":"widget:takeThimble1() widget:takeThimble2() widget:releaseThimble2()","title":"Event Origin"},{"location":"reference/widget_events/#signature_34","text":"def:uiCall_thimbleTopTake(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_33","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_34","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimbletoprelease","text":"A widget lost the top thimble.","title":"uiCall_thimbleTopRelease"},{"location":"reference/widget_events/#propagation-method_35","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_35","text":"widget:takeThimble2() widget:releaseThimble1() widget:releaseThimble2()","title":"Event Origin"},{"location":"reference/widget_events/#signature_35","text":"def:uiCall_thimbleTopRelease(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_34","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_35","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble1changed","text":"Emitted to the holder of thimble2 when thimble1 changes.","title":"uiCall_thimble1Changed"},{"location":"reference/widget_events/#propagation-method_36","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_36","text":"widget:takeThimble1() widget:releaseThimble1()","title":"Event Origin"},{"location":"reference/widget_events/#signature_36","text":"def:uiCall_thimble1Changed(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_35","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_36","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimble2changed","text":"Emitted to the holder of thimble1 when thimble2 changes.","title":"uiCall_thimble2Changed"},{"location":"reference/widget_events/#propagation-method_37","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_37","text":"widget:takeThimble2() widget:releaseThimble2()","title":"Event Origin"},{"location":"reference/widget_events/#signature_37","text":"def:uiCall_thimble2Changed(inst, a, b, c, d)","title":"Signature"},{"location":"reference/widget_events/#parameters_36","text":"inst : (ui:Widget) The target widget instance. a , b , c , d : (Any) Generic arguments which are supplied through the method that initiated the thimble handover. Usage depends on the implementation.","title":"Parameters"},{"location":"reference/widget_events/#returns_37","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_thimbleaction","text":"The user pressed enter/return or space while this widget had the thimble.","title":"uiCall_thimbleAction"},{"location":"reference/widget_events/#propagation-method_38","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_38","text":"WIMP Root.","title":"Event Origin"},{"location":"reference/widget_events/#signature_38","text":"def:uiCall_thimbleAction(inst, key, scancode, isrepeat)","title":"Signature"},{"location":"reference/widget_events/#parameters_37","text":"inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event.","title":"Parameters"},{"location":"reference/widget_events/#returns_38","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_13","text":"The enter key fires repeatedly, while space only fires once per press.","title":"Notes"},{"location":"reference/widget_events/#uicall_thimbleaction2","text":"The user pressed the Application key or Shift+F10 while a widget had the thimble.","title":"uiCall_thimbleAction2"},{"location":"reference/widget_events/#propagation-method_39","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_39","text":"WIMP Root","title":"Event Origin"},{"location":"reference/widget_events/#signature_39","text":"def:uiCall_thimbleAction2(inst, key, scancode, isrepeat)","title":"Signature"},{"location":"reference/widget_events/#parameters_38","text":"inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event.","title":"Parameters"},{"location":"reference/widget_events/#returns_39","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_14","text":"Does not fire repeatedly.","title":"Notes"},{"location":"reference/widget_events/#uicall_keypressed","text":"The user pressed a key while this widget had the thimble.","title":"uiCall_keyPressed"},{"location":"reference/widget_events/#propagation-method_40","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_40","text":"love.keypressed","title":"Event Origin"},{"location":"reference/widget_events/#signature_40","text":"def:uiCall_keyPressed(inst, key, scancode, isrepeat, hot_key, hot_scan)","title":"Signature"},{"location":"reference/widget_events/#parameters_39","text":"inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout). isrepeat : (Boolean) True if this is a repeat key event. hot_key : (String) A hotkey string, as determined by the current pressed key combined with the state of modifier keys. This field is false when a valid hotkey string cannot be generated (the pressed key must not be a modifier). hot_scan : (String) A hotkey string, as determined by the current pressed scancode combined with the state of modifier keys. This field is false when a valid hotkey string cannot be generated (the pressed scancode must not be a modifier).","title":"Parameters"},{"location":"reference/widget_events/#returns_40","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_keyreleased","text":"The user released a key while this widget had the thimble.","title":"uiCall_keyReleased"},{"location":"reference/widget_events/#propagation-method_41","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_41","text":"love.keyreleased","title":"Event Origin"},{"location":"reference/widget_events/#signature_41","text":"def:uiCall_keyReleased(inst, key, scancode)","title":"Signature"},{"location":"reference/widget_events/#parameters_40","text":"inst : (ui:Widget) The target widget instance. key : (String) The key code. scancode : (String) The keyboard scancode (maps to the classic US QWERTY keyboard layout).","title":"Parameters"},{"location":"reference/widget_events/#returns_41","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#uicall_textinput","text":"The user inputted text.","title":"uiCall_textInput"},{"location":"reference/widget_events/#propagation-method_42","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_42","text":"love.textinput","title":"Event Origin"},{"location":"reference/widget_events/#signature_42","text":"def:uiCall_textInput(inst, text)","title":"Signature"},{"location":"reference/widget_events/#parameters_41","text":"inst : (ui:Widget) The target widget instance. text : (String) The text.","title":"Parameters"},{"location":"reference/widget_events/#returns_42","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_15","text":"This event is independent of keyboard key-down and key-up events. L\u00d6VE text input must be enabled for this event to fire. The context checks the UTF-8 encoding of the text before invoking the event.","title":"Notes"},{"location":"reference/widget_events/#uicall_filedropped","text":"The user dropped a file onto the application window.","title":"uiCall_fileDropped"},{"location":"reference/widget_events/#propagation-method_43","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_43","text":"love.filedropped","title":"Event Origin"},{"location":"reference/widget_events/#signature_43","text":"def:uiCall_fileDropped(inst, file)","title":"Signature"},{"location":"reference/widget_events/#parameters_42","text":"inst : (ui:Widget) The target widget instance. file : (love:DroppedFile) The file object.","title":"Parameters"},{"location":"reference/widget_events/#returns_43","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_16","text":"Refer to the L\u00d6VE Wiki for information on how to work with the file argument.","title":"Notes"},{"location":"reference/widget_events/#uicall_directorydropped","text":"The user dropped a directory onto the application window.","title":"uiCall_directoryDropped"},{"location":"reference/widget_events/#propagation-method_44","text":"cycleEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_44","text":"love.directorydropped","title":"Event Origin"},{"location":"reference/widget_events/#signature_44","text":"def:uiCall_directoryDropped(inst, path)","title":"Signature"},{"location":"reference/widget_events/#parameters_43","text":"inst : (ui:Widget) The target widget instance. path : (String) The directory path.","title":"Parameters"},{"location":"reference/widget_events/#returns_44","text":"True to halt event propagation.","title":"Returns"},{"location":"reference/widget_events/#notes_17","text":"Refer to the L\u00d6VE Wiki for information on how to work with the path argument.","title":"Notes"},{"location":"reference/widget_events/#uicall_capture","text":"A widget started capturing events from the context.","title":"uiCall_capture"},{"location":"reference/widget_events/#propagation-method_45","text":"sendEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_45","text":"widget:captureFocus()","title":"Event Origin"},{"location":"reference/widget_events/#signature_45","text":"def:uiCall_capture(inst)","title":"Signature"},{"location":"reference/widget_events/#returns_45","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_uncapture","text":"A widget stopped capturing events from the context.","title":"uiCall_uncapture"},{"location":"reference/widget_events/#propagation-method_46","text":"sendEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_46","text":"widget:captureFocus() widget:uncaptureFocus()","title":"Event Origin"},{"location":"reference/widget_events/#signature_46","text":"def:uiCall_uncapture(inst)","title":"Signature"},{"location":"reference/widget_events/#returns_46","text":"Nothing.","title":"Returns"},{"location":"reference/widget_events/#uicall_capturetick","text":"Runs on the start of every frame when the widget is capturing events from the context.","title":"uiCall_captureTick"},{"location":"reference/widget_events/#propagation-method_47","text":"sendEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_47","text":"love.update","title":"Event Origin"},{"location":"reference/widget_events/#signature_47","text":"def:uiCall_captureTick(dt)","title":"Signature"},{"location":"reference/widget_events/#parameters_44","text":"dt : (Number) The delta time from love.update() .","title":"Parameters"},{"location":"reference/widget_events/#returns_47","text":"False to prevent other widgets from updating on this frame.","title":"Returns"},{"location":"reference/widget_events/#uicall_quit","text":"Runs on the root widget when the application is quitting.","title":"uiCall_quit"},{"location":"reference/widget_events/#propagation-method_48","text":"sendEvent.","title":"Propagation Method"},{"location":"reference/widget_events/#event-origin_48","text":"love.quit","title":"Event Origin"},{"location":"reference/widget_events/#signature_48","text":"def:uiCall_quit()","title":"Signature"},{"location":"reference/widget_events/#returns_48","text":"True to prevent the application from quitting.","title":"Returns"},{"location":"reference/widgets/","text":"Widgets Widgets are the programmable objects that make up an interface. Most widgets fall under one of the following broad categories: Controls, like buttons and sliders Containers (of other widgets) Informational or cosmetic elements, like text labels Root Widget The root is an invisible container that holds all other widgets. Only one root is allowed in the UI Context. G2 Widgets G2 (second generation) widgets are direct children of the root.","title":"Widgets"},{"location":"reference/widgets/#widgets","text":"Widgets are the programmable objects that make up an interface. Most widgets fall under one of the following broad categories: Controls, like buttons and sliders Containers (of other widgets) Informational or cosmetic elements, like text labels","title":"Widgets"},{"location":"reference/widgets/#root-widget","text":"The root is an invisible container that holds all other widgets. Only one root is allowed in the UI Context.","title":"Root Widget"},{"location":"reference/widgets/#g2-widgets","text":"G2 (second generation) widgets are direct children of the root.","title":"G2 Widgets"},{"location":"reference/wimp_interface/","text":"WIMP Interface WIMP Root The WIMP Root is the base of the widget tree. It manages state related to the WIMP interface, such as enforcing modal state. UI Frames UI Frames are ProdUI's top-level containers. They are all second generation widgets, meaning that they are direct children of the Root widget. Up to one UI Frame may be selected by the Root at any given time. Keyboard focus is typically routed to the selected UI Frame and its descendant widgets. There are two kinds of UI Frame: Workspaces and Window Frames . Workspace Frames A Workspace fills most (or all) of the application window. There can be up to one active (awake) workspace at a time, and any number of dormant workspaces. Window Frames Window Frames are movable rectangles that appear over the Workspace. There can be any number of Window Frames, and they support the following configurations: Modal : the topmost modal frame blocks interaction with all other frames, until dismissed. Frame-blocking : a window frame can block interaction with one other frame, until dismissed. Sorting levels : \"low\", \"normal\", and \"high\" Workspace association : When a Workspace is dormant, so too are any of its associated Window Frames. A Window Frame that is unassociated will appear, regardless of the current active workspace. Hidden : Active Window Frames can be made invisible (and denied user input events) while still running.","title":"WIMP Interface"},{"location":"reference/wimp_interface/#wimp-interface","text":"","title":"WIMP Interface"},{"location":"reference/wimp_interface/#wimp-root","text":"The WIMP Root is the base of the widget tree. It manages state related to the WIMP interface, such as enforcing modal state.","title":"WIMP Root"},{"location":"reference/wimp_interface/#ui-frames","text":"UI Frames are ProdUI's top-level containers. They are all second generation widgets, meaning that they are direct children of the Root widget. Up to one UI Frame may be selected by the Root at any given time. Keyboard focus is typically routed to the selected UI Frame and its descendant widgets. There are two kinds of UI Frame: Workspaces and Window Frames .","title":"UI Frames"},{"location":"reference/wimp_interface/#workspace-frames","text":"A Workspace fills most (or all) of the application window. There can be up to one active (awake) workspace at a time, and any number of dormant workspaces.","title":"Workspace Frames"},{"location":"reference/wimp_interface/#window-frames","text":"Window Frames are movable rectangles that appear over the Workspace. There can be any number of Window Frames, and they support the following configurations: Modal : the topmost modal frame blocks interaction with all other frames, until dismissed. Frame-blocking : a window frame can block interaction with one other frame, until dismissed. Sorting levels : \"low\", \"normal\", and \"high\" Workspace association : When a Workspace is dormant, so too are any of its associated Window Frames. A Window Frame that is unassociated will appear, regardless of the current active workspace. Hidden : Active Window Frames can be made invisible (and denied user input events) while still running.","title":"Window Frames"},{"location":"widgets/barebones/button/","text":"barebones/button An unskinned button. TODO","title":"barebones/button"},{"location":"widgets/barebones/button/#barebonesbutton","text":"An unskinned button. TODO","title":"barebones/button"},{"location":"widgets/barebones/button_instant/","text":"barebones/button_instant An unskinned button that activates on the initial click down. TODO","title":"barebones/button_instant"},{"location":"widgets/barebones/button_instant/#barebonesbutton_instant","text":"An unskinned button that activates on the initial click down. TODO","title":"barebones/button_instant"},{"location":"widgets/barebones/button_repeat/","text":"barebones/button_repeat An unskinned button that activates continuously as the user holds the mouse button. TODO","title":"barebones/button_repeat"},{"location":"widgets/barebones/button_repeat/#barebonesbutton_repeat","text":"An unskinned button that activates continuously as the user holds the mouse button. TODO","title":"barebones/button_repeat"},{"location":"widgets/barebones/button_sticky/","text":"barebones/button_sticky An unskinned button that remains in a depressed state after the initial click down. TODO","title":"barebones/button_sticky"},{"location":"widgets/barebones/button_sticky/#barebonesbutton_sticky","text":"An unskinned button that remains in a depressed state after the initial click down. TODO","title":"barebones/button_sticky"},{"location":"widgets/barebones/checkbox/","text":"barebones/checkbox A barebones checkbox. User Interaction Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the checkbox is activated (whether on or off). inst.wid_buttonAction = function(self) print(\"Current checked status: \" .. tostring(self.checked)) end Arguments self : The widget.","title":"barebones/checkbox"},{"location":"widgets/barebones/checkbox/#barebonescheckbox","text":"A barebones checkbox.","title":"barebones/checkbox"},{"location":"widgets/barebones/checkbox/#user-interaction","text":"Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/barebones/checkbox/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/barebones/checkbox/#wid_buttonaction","text":"Called when the checkbox is activated (whether on or off). inst.wid_buttonAction = function(self) print(\"Current checked status: \" .. tostring(self.checked)) end","title":"wid_buttonAction"},{"location":"widgets/barebones/checkbox/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/barebones/input_box/","text":"barebones/input_box An unskinned and very simple text input box. TODO","title":"barebones/input_box"},{"location":"widgets/barebones/input_box/#barebonesinput_box","text":"An unskinned and very simple text input box. TODO","title":"barebones/input_box"},{"location":"widgets/barebones/label/","text":"barebones/label An unskinned text label widget. TODO","title":"barebones/label"},{"location":"widgets/barebones/label/#bareboneslabel","text":"An unskinned text label widget. TODO","title":"barebones/label"},{"location":"widgets/barebones/radio_button/","text":"barebones/radio_button An unskinned radio button control. TODO","title":"barebones/radio_button"},{"location":"widgets/barebones/radio_button/#barebonesradio_button","text":"An unskinned radio button control. TODO","title":"barebones/radio_button"},{"location":"widgets/barebones/slider_bar/","text":"barebones/slider_bar An unskinned slider bar. TODO","title":"barebones/slider_bar"},{"location":"widgets/barebones/slider_bar/#barebonesslider_bar","text":"An unskinned slider bar. TODO","title":"barebones/slider_bar"},{"location":"widgets/base/button/","text":"base/button A plain skinned button. User Interaction Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/button"},{"location":"widgets/base/button/#basebutton","text":"A plain skinned button.","title":"base/button"},{"location":"widgets/base/button/#user-interaction","text":"Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/button/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/button/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/button/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/button_double_click/","text":"base/button_double_click A button that activates when the user clicks on it twice consecutively. User Interaction Mouse : Double-click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/button_double_click"},{"location":"widgets/base/button_double_click/#basebutton_double_click","text":"A button that activates when the user clicks on it twice consecutively.","title":"base/button_double_click"},{"location":"widgets/base/button_double_click/#user-interaction","text":"Mouse : Double-click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/button_double_click/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/button_double_click/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/button_double_click/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/button_instant/","text":"base/button_instant A button that activates when the user clicks down on it. User Interaction Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/button_instant"},{"location":"widgets/base/button_instant/#basebutton_instant","text":"A button that activates when the user clicks down on it.","title":"base/button_instant"},{"location":"widgets/base/button_instant/#user-interaction","text":"Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/button_instant/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/button_instant/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/button_instant/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/button_repeat/","text":"base/button_repeat A skinned repeat-action button. User Interaction Mouse : Press to activate immediately. Hold to continuously activate. Keyboard : Press return or kpenter to activate. Methods self:setEnabled Enables or disables the widget's controls. self:setEnabled(enabled) Arguments enabled : true to enable interaction with the widget, false to disable. self:setLabel Sets the button's text label. self:setLabel(text, mode) Arguments text : The text to assign to the label. mode : The label mode. Callbacks self.wid_buttonAction Called when the button is activated. inst.wid_buttonAction = function(self) print(\"I've been clicked!\") end","title":"base/button_repeat"},{"location":"widgets/base/button_repeat/#basebutton_repeat","text":"A skinned repeat-action button.","title":"base/button_repeat"},{"location":"widgets/base/button_repeat/#user-interaction","text":"Mouse : Press to activate immediately. Hold to continuously activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/button_repeat/#methods","text":"","title":"Methods"},{"location":"widgets/base/button_repeat/#selfsetenabled","text":"Enables or disables the widget's controls. self:setEnabled(enabled)","title":"self:setEnabled"},{"location":"widgets/base/button_repeat/#arguments","text":"enabled : true to enable interaction with the widget, false to disable.","title":"Arguments"},{"location":"widgets/base/button_repeat/#selfsetlabel","text":"Sets the button's text label. self:setLabel(text, mode)","title":"self:setLabel"},{"location":"widgets/base/button_repeat/#arguments_1","text":"text : The text to assign to the label. mode : The label mode.","title":"Arguments"},{"location":"widgets/base/button_repeat/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/button_repeat/#selfwid_buttonaction","text":"Called when the button is activated. inst.wid_buttonAction = function(self) print(\"I've been clicked!\") end","title":"self.wid_buttonAction"},{"location":"widgets/base/button_sticky/","text":"base/button_sticky A button that remains in a depressed state after the user clicks it. User Interaction Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/button_sticky"},{"location":"widgets/base/button_sticky/#basebutton_sticky","text":"A button that remains in a depressed state after the user clicks it.","title":"base/button_sticky"},{"location":"widgets/base/button_sticky/#user-interaction","text":"Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/button_sticky/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/button_sticky/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/button_sticky/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/checkbox/","text":"base/checkbox A button with two states (true or false). User Interaction Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/checkbox"},{"location":"widgets/base/checkbox/#basecheckbox","text":"A button with two states (true or false).","title":"base/checkbox"},{"location":"widgets/base/checkbox/#user-interaction","text":"Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/checkbox/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/checkbox/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/checkbox/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/checkbox_multi/","text":"base/checkbox_multi A checkbox with a configurable number of states, expressed as integers. User Interaction Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks wid_buttonAction Called when the button is activated. Arguments self : The widget.","title":"base/checkbox_multi"},{"location":"widgets/base/checkbox_multi/#basecheckbox_multi","text":"A checkbox with a configurable number of states, expressed as integers.","title":"base/checkbox_multi"},{"location":"widgets/base/checkbox_multi/#user-interaction","text":"Mouse : Click with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/checkbox_multi/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/checkbox_multi/#wid_buttonaction","text":"Called when the button is activated.","title":"wid_buttonAction"},{"location":"widgets/base/checkbox_multi/#arguments","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/container/","text":"base/container A container of other widgets. TODO","title":"base/container"},{"location":"widgets/base/container/#basecontainer","text":"A container of other widgets. TODO","title":"base/container"},{"location":"widgets/base/container_simple/","text":"base/container_simple A simplified container. TODO","title":"base/container_simple"},{"location":"widgets/base/container_simple/#basecontainer_simple","text":"A simplified container. TODO","title":"base/container_simple"},{"location":"widgets/base/dial/","text":"base/dial A radial dial control. TODO","title":"base/dial"},{"location":"widgets/base/dial/#basedial","text":"A radial dial control. TODO","title":"base/dial"},{"location":"widgets/base/generic/","text":"base/generic A blank widget definition. Instances start with only the built-in widget methods. User Interaction Does not respond to direct user input. Methods None. Callbacks None.","title":"base/generic"},{"location":"widgets/base/generic/#basegeneric","text":"A blank widget definition. Instances start with only the built-in widget methods.","title":"base/generic"},{"location":"widgets/base/generic/#user-interaction","text":"Does not respond to direct user input.","title":"User Interaction"},{"location":"widgets/base/generic/#methods","text":"None.","title":"Methods"},{"location":"widgets/base/generic/#callbacks","text":"None.","title":"Callbacks"},{"location":"widgets/base/label/","text":"base/label A standalone skinned text label. While many control widgets have built-in label support, sometimes there is not enough space in the widget body for the text. User Interaction Does not respond to direct user input. Methods self:setLabel Sets the label widget's text. self:setLabel(text, mode) Arguments text : The text to assign to the label. mode : The label mode.","title":"base/label"},{"location":"widgets/base/label/#baselabel","text":"A standalone skinned text label. While many control widgets have built-in label support, sometimes there is not enough space in the widget body for the text.","title":"base/label"},{"location":"widgets/base/label/#user-interaction","text":"Does not respond to direct user input.","title":"User Interaction"},{"location":"widgets/base/label/#methods","text":"","title":"Methods"},{"location":"widgets/base/label/#selfsetlabel","text":"Sets the label widget's text. self:setLabel(text, mode)","title":"self:setLabel"},{"location":"widgets/base/label/#arguments","text":"text : The text to assign to the label. mode : The label mode.","title":"Arguments"},{"location":"widgets/base/radio_button/","text":"base/radio_button A plain radio button. TODO: talk about radio button groups and how they are demarcated at the sibling level. User Interaction Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate. Callbacks TODO","title":"base/radio_button"},{"location":"widgets/base/radio_button/#baseradio_button","text":"A plain radio button. TODO: talk about radio button groups and how they are demarcated at the sibling level.","title":"base/radio_button"},{"location":"widgets/base/radio_button/#user-interaction","text":"Mouse : Press and release with the cursor overlapping the widget to activate. Keyboard : Press return or kpenter to activate.","title":"User Interaction"},{"location":"widgets/base/radio_button/#callbacks","text":"TODO","title":"Callbacks"},{"location":"widgets/base/slider_bar/","text":"base/slider_bar A horizontal or vertical slider bar. This widget supports an optional text label, but a customized skin is required for correct placement. Methods self:setSliderPosition self:setSliderMax self:setSliderDefault self:setSliderHome self:setSliderAxis self:setSliderAllowChanges self:setEnabled Enables or disables the widget's controls. self:setEnabled(enabled) Arguments enabled : true to enable interaction with the widget, false to disable. self:setLabel Sets the slider bar's text label. self:setLabel(text, mode) Arguments text : The text to assign to the label. mode : The label mode.","title":"base/slider_bar"},{"location":"widgets/base/slider_bar/#baseslider_bar","text":"A horizontal or vertical slider bar. This widget supports an optional text label, but a customized skin is required for correct placement.","title":"base/slider_bar"},{"location":"widgets/base/slider_bar/#methods","text":"","title":"Methods"},{"location":"widgets/base/slider_bar/#selfsetsliderposition","text":"","title":"self:setSliderPosition"},{"location":"widgets/base/slider_bar/#selfsetslidermax","text":"","title":"self:setSliderMax"},{"location":"widgets/base/slider_bar/#selfsetsliderdefault","text":"","title":"self:setSliderDefault"},{"location":"widgets/base/slider_bar/#selfsetsliderhome","text":"","title":"self:setSliderHome"},{"location":"widgets/base/slider_bar/#selfsetslideraxis","text":"","title":"self:setSliderAxis"},{"location":"widgets/base/slider_bar/#selfsetsliderallowchanges","text":"","title":"self:setSliderAllowChanges"},{"location":"widgets/base/slider_bar/#selfsetenabled","text":"Enables or disables the widget's controls. self:setEnabled(enabled)","title":"self:setEnabled"},{"location":"widgets/base/slider_bar/#arguments","text":"enabled : true to enable interaction with the widget, false to disable.","title":"Arguments"},{"location":"widgets/base/slider_bar/#selfsetlabel","text":"Sets the slider bar's text label. self:setLabel(text, mode)","title":"self:setLabel"},{"location":"widgets/base/slider_bar/#arguments_1","text":"text : The text to assign to the label. mode : The label mode.","title":"Arguments"},{"location":"widgets/base/stepper/","text":"base/stepper A stepper button. Step through options by clicking on the edge buttons, or by pressing the arrow keys on the keyboard. Steppers are more common in controller-centric game menus. In a WIMP UI, they may be useful in situations where space is limited. User Interaction Mouse : Press the next or prev buttons to increment or decrement the option index. Keyboard : Press left or right to increment or decrement the option index. Methods self:setEnabled Enables or disables the widget's controls. self:setEnabled(enabled) Arguments enabled : true to enable user interaction with the widget, false to disable. self:insertOption Inserts an option to the stepper. If the stepper options array is empty, then this option is selected. self:insertOption(option, i) Arguments option The option value to use. Can either be a string (which will be used as the label text when selected) or a table (where tbl.text is used for the label text). i (#self.options + 1) Where to insert the option in the array. Must be between 1 and #options + 1 . If not specified, the option will be added to the end of the array. self:removeOption Removes an option from the stepper. If the removed option was the only one in the array, then the index is set to zero. self:removeOption(i) Arguments i : (#self.options) Index of the option to remove in the array. Must be between 1 and #options . If not specified, the last option in the array will be removed. Returns The removed option value. Callbacks wid_stepperChanged Called when the stepper value changes. self.wid_stepperChanged = function(self, old_index, new_index) Arguments self The widget. index The new index. wid_buttonAction Called by pressing enter or kpenter on the keyboard. There is no built-in mouse command for the primary action. self.wid_buttonAction = function(self) Arguments self : The widget. wid_buttonAction2 Called by right-clicking on the widget, or by pressing application or shift+f10 on the keyboard. self.wid_buttonAction2 = function(self) Arguments self The widget. wid_buttonAction3 wid_buttonAction3 : Middle-click on the widget. There is no built-in keyboard command for the tertiary action. self.wid_buttonAction2 = function(self) Arguments self : The widget. Notes The concept for this widget is taken from the LUIGI UI library.","title":"base/stepper"},{"location":"widgets/base/stepper/#basestepper","text":"A stepper button. Step through options by clicking on the edge buttons, or by pressing the arrow keys on the keyboard. Steppers are more common in controller-centric game menus. In a WIMP UI, they may be useful in situations where space is limited.","title":"base/stepper"},{"location":"widgets/base/stepper/#user-interaction","text":"Mouse : Press the next or prev buttons to increment or decrement the option index. Keyboard : Press left or right to increment or decrement the option index.","title":"User Interaction"},{"location":"widgets/base/stepper/#methods","text":"","title":"Methods"},{"location":"widgets/base/stepper/#selfsetenabled","text":"Enables or disables the widget's controls. self:setEnabled(enabled)","title":"self:setEnabled"},{"location":"widgets/base/stepper/#arguments","text":"enabled : true to enable user interaction with the widget, false to disable.","title":"Arguments"},{"location":"widgets/base/stepper/#selfinsertoption","text":"Inserts an option to the stepper. If the stepper options array is empty, then this option is selected. self:insertOption(option, i)","title":"self:insertOption"},{"location":"widgets/base/stepper/#arguments_1","text":"option The option value to use. Can either be a string (which will be used as the label text when selected) or a table (where tbl.text is used for the label text). i (#self.options + 1) Where to insert the option in the array. Must be between 1 and #options + 1 . If not specified, the option will be added to the end of the array.","title":"Arguments"},{"location":"widgets/base/stepper/#selfremoveoption","text":"Removes an option from the stepper. If the removed option was the only one in the array, then the index is set to zero. self:removeOption(i)","title":"self:removeOption"},{"location":"widgets/base/stepper/#arguments_2","text":"i : (#self.options) Index of the option to remove in the array. Must be between 1 and #options . If not specified, the last option in the array will be removed.","title":"Arguments"},{"location":"widgets/base/stepper/#returns","text":"The removed option value.","title":"Returns"},{"location":"widgets/base/stepper/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/base/stepper/#wid_stepperchanged","text":"Called when the stepper value changes. self.wid_stepperChanged = function(self, old_index, new_index)","title":"wid_stepperChanged"},{"location":"widgets/base/stepper/#arguments_3","text":"self The widget. index The new index.","title":"Arguments"},{"location":"widgets/base/stepper/#wid_buttonaction","text":"Called by pressing enter or kpenter on the keyboard. There is no built-in mouse command for the primary action. self.wid_buttonAction = function(self)","title":"wid_buttonAction"},{"location":"widgets/base/stepper/#arguments_4","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/stepper/#wid_buttonaction2","text":"Called by right-clicking on the widget, or by pressing application or shift+f10 on the keyboard. self.wid_buttonAction2 = function(self)","title":"wid_buttonAction2"},{"location":"widgets/base/stepper/#arguments_5","text":"self The widget.","title":"Arguments"},{"location":"widgets/base/stepper/#wid_buttonaction3","text":"wid_buttonAction3 : Middle-click on the widget. There is no built-in keyboard command for the tertiary action. self.wid_buttonAction2 = function(self)","title":"wid_buttonAction3"},{"location":"widgets/base/stepper/#arguments_6","text":"self : The widget.","title":"Arguments"},{"location":"widgets/base/stepper/#notes","text":"The concept for this widget is taken from the LUIGI UI library.","title":"Notes"},{"location":"widgets/base/text/","text":"base/text A generic text widget. TODO","title":"base/text"},{"location":"widgets/base/text/#basetext","text":"A generic text widget. TODO","title":"base/text"},{"location":"widgets/input/text_box_multi/","text":"input/text_box_multi A multi-line text input box. TODO","title":"input/text_box_multi"},{"location":"widgets/input/text_box_multi/#inputtext_box_multi","text":"A multi-line text input box. TODO","title":"input/text_box_multi"},{"location":"widgets/input/text_box_single/","text":"input/text_box_single A single-line text input box. TODO","title":"input/text_box_single"},{"location":"widgets/input/text_box_single/#inputtext_box_single","text":"A single-line text input box. TODO","title":"input/text_box_single"},{"location":"widgets/status/progress_bar/","text":"status/progress_bar A progress bar. User Interaction None. Methods self:setActive Sets the progress bar's active state. self:setActive(active) active : true to set the progress bar to active state, false / nil / nothing to set it to inactive. Notes Active state only affects the visual appearance of the progress bar. It does not change its internal behavior, nor does it prevent the bar from being updated. self:setCounter Sets the progress bar's current position and maximum value. self:setCounter(pos, max) pos : The new position. Clamped between 0 and the new max value. max : (self.max) An optional new maximum value. Clamped on the low end to 0 . Events Calls wid_barChanged if the position or maximum value changed. self:setLabel See wid:setLabel() . Callbacks wid_barChanged Called when the progress bar's position or maximum value changed. function def:wid_barChanged(old_pos, old_max, new_pos, new_max) old_pos : The old position. old_max : The old maximum value. new_pos : The new position. new_max : The new maximum value. Notes Do not call self:setCounter() from within this callback. It can overflow the stack.","title":"status/progress_bar"},{"location":"widgets/status/progress_bar/#statusprogress_bar","text":"A progress bar.","title":"status/progress_bar"},{"location":"widgets/status/progress_bar/#user-interaction","text":"None.","title":"User Interaction"},{"location":"widgets/status/progress_bar/#methods","text":"","title":"Methods"},{"location":"widgets/status/progress_bar/#selfsetactive","text":"Sets the progress bar's active state. self:setActive(active) active : true to set the progress bar to active state, false / nil / nothing to set it to inactive.","title":"self:setActive"},{"location":"widgets/status/progress_bar/#notes","text":"Active state only affects the visual appearance of the progress bar. It does not change its internal behavior, nor does it prevent the bar from being updated.","title":"Notes"},{"location":"widgets/status/progress_bar/#selfsetcounter","text":"Sets the progress bar's current position and maximum value. self:setCounter(pos, max) pos : The new position. Clamped between 0 and the new max value. max : (self.max) An optional new maximum value. Clamped on the low end to 0 .","title":"self:setCounter"},{"location":"widgets/status/progress_bar/#events","text":"Calls wid_barChanged if the position or maximum value changed.","title":"Events"},{"location":"widgets/status/progress_bar/#selfsetlabel","text":"See wid:setLabel() .","title":"self:setLabel"},{"location":"widgets/status/progress_bar/#callbacks","text":"","title":"Callbacks"},{"location":"widgets/status/progress_bar/#wid_barchanged","text":"Called when the progress bar's position or maximum value changed. function def:wid_barChanged(old_pos, old_max, new_pos, new_max) old_pos : The old position. old_max : The old maximum value. new_pos : The new position. new_max : The new maximum value.","title":"wid_barChanged"},{"location":"widgets/status/progress_bar/#notes_1","text":"Do not call self:setCounter() from within this callback. It can overflow the stack.","title":"Notes"},{"location":"widgets/wimp/button_split/","text":"wimp/button_split A button with a secondary action mapped to one half of the clickable surface. TODO","title":"wimp/button_split"},{"location":"widgets/wimp/button_split/#wimpbutton_split","text":"A button with a secondary action mapped to one half of the clickable surface. TODO","title":"wimp/button_split"},{"location":"widgets/wimp/combo_box/","text":"wimp/combo_box A control that combines a drop-down list with a text input field. TODO","title":"wimp/combo_box"},{"location":"widgets/wimp/combo_box/#wimpcombo_box","text":"A control that combines a drop-down list with a text input field. TODO","title":"wimp/combo_box"},{"location":"widgets/wimp/dropdown_box/","text":"wimp/dropdown_box A drop-down menu. TODO","title":"wimp/dropdown_box"},{"location":"widgets/wimp/dropdown_box/#wimpdropdown_box","text":"A drop-down menu. TODO","title":"wimp/dropdown_box"},{"location":"widgets/wimp/dropdown_pop/","text":"wimp/dropdown_pop The pop-up menu component of a dropdown box. TODO","title":"wimp/dropdown_pop"},{"location":"widgets/wimp/dropdown_pop/#wimpdropdown_pop","text":"The pop-up menu component of a dropdown box. TODO","title":"wimp/dropdown_pop"},{"location":"widgets/wimp/group/","text":"wimp/group A collection of other widgets. TODO","title":"wimp/group"},{"location":"widgets/wimp/group/#wimpgroup","text":"A collection of other widgets. TODO","title":"wimp/group"},{"location":"widgets/wimp/icon_box/","text":"wimp/icon_box A menu where icons are displayed prominently in its selectable items. TODO","title":"wimp/icon_box"},{"location":"widgets/wimp/icon_box/#wimpicon_box","text":"A menu where icons are displayed prominently in its selectable items. TODO","title":"wimp/icon_box"},{"location":"widgets/wimp/list_box/","text":"wimp/listbox A List Box. User Interaction Mouse : Click to select a list item. Click and drag to scroll the view. Keyboard : Navigation: up , down , pageup , pagedown , home , end","title":"wimp/listbox"},{"location":"widgets/wimp/list_box/#wimplistbox","text":"A List Box.","title":"wimp/listbox"},{"location":"widgets/wimp/list_box/#user-interaction","text":"Mouse : Click to select a list item. Click and drag to scroll the view. Keyboard : Navigation: up , down , pageup , pagedown , home , end","title":"User Interaction"},{"location":"widgets/wimp/menu_bar/","text":"wimp/menu_bar A menu bar for Window Frames or the application as a whole. TODO","title":"wimp/menu_bar"},{"location":"widgets/wimp/menu_bar/#wimpmenu_bar","text":"A menu bar for Window Frames or the application as a whole. TODO","title":"wimp/menu_bar"},{"location":"widgets/wimp/menu_tab/","text":"wimp/menu_tab A tabular (chart) menu. TODO","title":"wimp/menu_tab"},{"location":"widgets/wimp/menu_tab/#wimpmenu_tab","text":"A tabular (chart) menu. TODO","title":"wimp/menu_tab"},{"location":"widgets/wimp/number_box/","text":"wimp/number_box A specialized input box for numbers. TODO","title":"wimp/number_box"},{"location":"widgets/wimp/number_box/#wimpnumber_box","text":"A specialized input box for numbers. TODO","title":"wimp/number_box"},{"location":"widgets/wimp/properties_box/","text":"wimp/properties_box A menu of sub-widget controls. TODO","title":"wimp/properties_box"},{"location":"widgets/wimp/properties_box/#wimpproperties_box","text":"A menu of sub-widget controls. TODO","title":"wimp/properties_box"},{"location":"widgets/wimp/root_wimp/","text":"wimp/root_wimp The root widget for WIMP interfaces. WIMP G2 Sort Lanes Inactive Workspaces and Window Frames The active Workspace Window Frames, low Window Frames, normal priority Window Frames, always on top Application menu bar, status bar, etc. Pop-up menus","title":"wimp/root_wimp"},{"location":"widgets/wimp/root_wimp/#wimproot_wimp","text":"The root widget for WIMP interfaces.","title":"wimp/root_wimp"},{"location":"widgets/wimp/root_wimp/#wimp-g2-sort-lanes","text":"Inactive Workspaces and Window Frames The active Workspace Window Frames, low Window Frames, normal priority Window Frames, always on top Application menu bar, status bar, etc. Pop-up menus","title":"WIMP G2 Sort Lanes"},{"location":"widgets/wimp/text_block/","text":"wimp/text_block A skinned block of text. This widget can automatically resize along the horizontal or vertical axis as part of its reshaping mechanism. TextBlocks are good for titles, headings, and short paragraphs that don't change often. They are not suitable for text that updates on every frame. Changes to a TextBlock's font, text and alignment will not fully take effect until the widget is reshaped. TextBlocks do not support L\u00d6VE coloredtext sequences. API TextBlock:setFontID Sets the font ID. TextBlock:setFontID(id) id : (string) The font ID. TextBlock:getFontID Gets the font ID. local font_id = TextBlock:getFontID() Returns: The font ID. TextBlock:setText Sets the text. TextBlock:setText(text) text : The new text string. TextBlock:getText Gets the current text. local text = TextBlock:getText() Returns: The current text. TextBlock:setURL Sets a URL, and configures the Text Block to be pressable (or not, if the URL is being removed). TextBlock:setURL(url) url : The URL string, to be activated upon pressing, or false/nil to remove the URL. Notes User events wid_buttonAction (left click, enter key, space key) and wid_buttonAction3 (middle click) are assigned a default function which attempts to open the TextBlock's URL with love.system.openURL() . This function can be replaced to provide more functionality, like in-program navigation. TextBlock:getURL Gets the current URL. local url = TextBlock:getURL() Returns: The URL string, or false if there is no string set. TextBlock:setAlign Sets the text alignment. TextBlock:setAlign(align) align : ( L\u00d6VE AlignMode ) The text alignment. TextBlock:getAlign Gets the text alignment. local align = TextBlock:getAlign() Returns: The text alignment. TextBlock:setVerticalAlign Sets the text's vertical alignment. TextBlock:setVerticalAlign(v) v : (number) The vertical alignment, from 0.0 (top) to 1.0 (bottom). TextBlock:getVerticalAlign Gets the text's vertical alignment. local v = TextBlock:getVerticalAlign() Returns: The text's vertical alignment. TextBlock:setAutoSize Sets or clears the widget's automatic size mode. TextBlock:setAutoSize(mode) mode : \"h\" for horizontal mode, \"v\" for vertical mode, false/nil to disable. TextBlock:getAutoSize Gets the widget's automatic size mode. local mode = TextBlock:getAutoSize Returns: The automatic size mode (\"h\", \"v\" or boolean false). TextBlock:setWrapping Sets the widget's text wrapping mode. TextBlock:setWrapping(enabled) enabled : (boolean) True to wrap text, false to allow it to exceed the widget's horizontal boundaries. TextBlock:getWrapping Gets the widget's text wrapping mode. local enabled = TextBlock:getWrapping() Returns: true or false. Information Font IDs Font IDs are determined by the widget skin. The default IDs are: h1 h2 h3 h4 p (paragraph) small","title":"wimp/text_block"},{"location":"widgets/wimp/text_block/#wimptext_block","text":"A skinned block of text. This widget can automatically resize along the horizontal or vertical axis as part of its reshaping mechanism. TextBlocks are good for titles, headings, and short paragraphs that don't change often. They are not suitable for text that updates on every frame. Changes to a TextBlock's font, text and alignment will not fully take effect until the widget is reshaped. TextBlocks do not support L\u00d6VE coloredtext sequences.","title":"wimp/text_block"},{"location":"widgets/wimp/text_block/#api","text":"","title":"API"},{"location":"widgets/wimp/text_block/#textblocksetfontid","text":"Sets the font ID. TextBlock:setFontID(id) id : (string) The font ID.","title":"TextBlock:setFontID"},{"location":"widgets/wimp/text_block/#textblockgetfontid","text":"Gets the font ID. local font_id = TextBlock:getFontID() Returns: The font ID.","title":"TextBlock:getFontID"},{"location":"widgets/wimp/text_block/#textblocksettext","text":"Sets the text. TextBlock:setText(text) text : The new text string.","title":"TextBlock:setText"},{"location":"widgets/wimp/text_block/#textblockgettext","text":"Gets the current text. local text = TextBlock:getText() Returns: The current text.","title":"TextBlock:getText"},{"location":"widgets/wimp/text_block/#textblockseturl","text":"Sets a URL, and configures the Text Block to be pressable (or not, if the URL is being removed). TextBlock:setURL(url) url : The URL string, to be activated upon pressing, or false/nil to remove the URL.","title":"TextBlock:setURL"},{"location":"widgets/wimp/text_block/#notes","text":"User events wid_buttonAction (left click, enter key, space key) and wid_buttonAction3 (middle click) are assigned a default function which attempts to open the TextBlock's URL with love.system.openURL() . This function can be replaced to provide more functionality, like in-program navigation.","title":"Notes"},{"location":"widgets/wimp/text_block/#textblockgeturl","text":"Gets the current URL. local url = TextBlock:getURL() Returns: The URL string, or false if there is no string set.","title":"TextBlock:getURL"},{"location":"widgets/wimp/text_block/#textblocksetalign","text":"Sets the text alignment. TextBlock:setAlign(align) align : ( L\u00d6VE AlignMode ) The text alignment.","title":"TextBlock:setAlign"},{"location":"widgets/wimp/text_block/#textblockgetalign","text":"Gets the text alignment. local align = TextBlock:getAlign() Returns: The text alignment.","title":"TextBlock:getAlign"},{"location":"widgets/wimp/text_block/#textblocksetverticalalign","text":"Sets the text's vertical alignment. TextBlock:setVerticalAlign(v) v : (number) The vertical alignment, from 0.0 (top) to 1.0 (bottom).","title":"TextBlock:setVerticalAlign"},{"location":"widgets/wimp/text_block/#textblockgetverticalalign","text":"Gets the text's vertical alignment. local v = TextBlock:getVerticalAlign() Returns: The text's vertical alignment.","title":"TextBlock:getVerticalAlign"},{"location":"widgets/wimp/text_block/#textblocksetautosize","text":"Sets or clears the widget's automatic size mode. TextBlock:setAutoSize(mode) mode : \"h\" for horizontal mode, \"v\" for vertical mode, false/nil to disable.","title":"TextBlock:setAutoSize"},{"location":"widgets/wimp/text_block/#textblockgetautosize","text":"Gets the widget's automatic size mode. local mode = TextBlock:getAutoSize Returns: The automatic size mode (\"h\", \"v\" or boolean false).","title":"TextBlock:getAutoSize"},{"location":"widgets/wimp/text_block/#textblocksetwrapping","text":"Sets the widget's text wrapping mode. TextBlock:setWrapping(enabled) enabled : (boolean) True to wrap text, false to allow it to exceed the widget's horizontal boundaries.","title":"TextBlock:setWrapping"},{"location":"widgets/wimp/text_block/#textblockgetwrapping","text":"Gets the widget's text wrapping mode. local enabled = TextBlock:getWrapping() Returns: true or false.","title":"TextBlock:getWrapping"},{"location":"widgets/wimp/text_block/#information","text":"","title":"Information"},{"location":"widgets/wimp/text_block/#font-ids","text":"Font IDs are determined by the widget skin. The default IDs are: h1 h2 h3 h4 p (paragraph) small","title":"Font IDs"},{"location":"widgets/wimp/tree_box/","text":"wimp/tree_box A TreeBox menu. TODO","title":"wimp/tree_box"},{"location":"widgets/wimp/tree_box/#wimptree_box","text":"A TreeBox menu. TODO","title":"wimp/tree_box"},{"location":"widgets/wimp/window_frame/","text":"wimp/window_frame A WIMP-style window frame. ........................ <\u2500 Resize sensor .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510. .\u2502 Window [o][x]\u2502. <\u2500 Window frame header, drag sensor and control buttons .\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524. .\u2502'''''''''''''''''''^\u2502. <- ': Viewport #1 .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502'''''''''''''''''''v\u2502. .\u2502<\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550> \u2502. <\u2500 Optional scroll bars .\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518. ........................","title":"wimp/window_frame"},{"location":"widgets/wimp/window_frame/#wimpwindow_frame","text":"A WIMP-style window frame. ........................ <\u2500 Resize sensor .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510. .\u2502 Window [o][x]\u2502. <\u2500 Window frame header, drag sensor and control buttons .\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524. .\u2502'''''''''''''''''''^\u2502. <- ': Viewport #1 .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502' '\u2551\u2502. .\u2502'''''''''''''''''''v\u2502. .\u2502<\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550> \u2502. <\u2500 Optional scroll bars .\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518. ........................","title":"wimp/window_frame"},{"location":"widgets/wimp/workspace/","text":"wimp/workspace A container that serves as one program state for WIMP applications. This is similar to base/container, but with some additions and removals to better work as a G2 WIMP widget. \u250c\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u2510 \u2502`````````````````````\u2502^\u2502 [`] == Viewport 2 \u2502`:::::::::::::::::::`\u251c\u2508\u2524 [:] == Viewport 1 \u2502`: :`\u2502 \u2502 \u2502`: :`\u2502 \u2502 \u2502`: :`\u2502 \u2502 \u2502`:::::::::::::::::::`\u251c\u2508\u2524 \u2502`````````````````````\u2502v\u2502 \u251c\u2508\u252c\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u253c\u2508\u2524 \u2502<\u2502 \u2502>\u2502 \u2502 <- Optional scroll bars \u2514\u2508\u2534\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2534\u2508\u2534\u2508\u2518","title":"wimp/workspace"},{"location":"widgets/wimp/workspace/#wimpworkspace","text":"A container that serves as one program state for WIMP applications. This is similar to base/container, but with some additions and removals to better work as a G2 WIMP widget. \u250c\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u2510 \u2502`````````````````````\u2502^\u2502 [`] == Viewport 2 \u2502`:::::::::::::::::::`\u251c\u2508\u2524 [:] == Viewport 1 \u2502`: :`\u2502 \u2502 \u2502`: :`\u2502 \u2502 \u2502`: :`\u2502 \u2502 \u2502`:::::::::::::::::::`\u251c\u2508\u2524 \u2502`````````````````````\u2502v\u2502 \u251c\u2508\u252c\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u252c\u2508\u253c\u2508\u2524 \u2502<\u2502 \u2502>\u2502 \u2502 <- Optional scroll bars \u2514\u2508\u2534\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2534\u2508\u2534\u2508\u2518","title":"wimp/workspace"},{"location":"widgets/wimp/embed/checkbox/","text":"wimp/embed/checkbox An embeddable checkbox with no text label. TODO","title":"wimp/embed/checkbox"},{"location":"widgets/wimp/embed/checkbox/#wimpembedcheckbox","text":"An embeddable checkbox with no text label. TODO","title":"wimp/embed/checkbox"}]}